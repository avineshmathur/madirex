{"version":3,"sources":["webpack:///src/app/_guards/admin.auth.guard.ts","webpack:///src/app/_services/client.service.ts","webpack:///src/app/_guardsclinic/index.ts","webpack:///src/app/constant.ts","webpack:///src/environments/environment.ts","webpack:///src/app/_guardsclinic/adminclinic.auth.guard.ts","webpack:///src/app/_services/role.service.ts","webpack:///src/app/_services/adminclinic.auth.service.ts","webpack:///src/app/block-element/block-element.module.ts","webpack:///src/app/block-template/block-template.component.ts","webpack:///src/app/_services/index.ts","webpack:///src/app/_guards/auth.guard.ts","webpack:///src/app/_services/authenticationclinic.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/_services/user.service.ts","webpack:///src/app/_helpers/index.ts","webpack:///src/app/_services/common.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/_services/admin.auth.service.ts","webpack:///src/app/_services/business.service.ts","webpack:///src/app/shared/spinner/spinner.component.ts","webpack:///src/app/shared/spinner/spinner.component.html","webpack:///src/app/_services/patient.service.ts","webpack:///src/app/_helpers/error.interceptor.ts","webpack:///src/app/not-found/not-found.component.ts","webpack:///src/app/not-found/not-found.component.html","webpack:///src/app/_services/authentication.service.ts","webpack:///src/app/_guards/index.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/_guardsclinic/authclinic.guard.ts","webpack:///src/app/block-element/block-element.component.ts","webpack:///src/app/block-element/block-element.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["AdminAuthGuard","router","route","state","url","checkLogin","currentSuperAdmin","JSON","parse","localStorage","getItem","id","navigate","ClientService","http","commonService","loggedIn","next","asObservable","clientId","requestData","Promise","resolve","reject","post","API_BASE_PATH","stringify","getHttpOptions","API_SUPERADMIN_KEY","SUBDOMAIN","timeout","TIMEOUT_SECONDS","subscribe","res","err","get","console","log","countryId","stateId","clinicName","firstName","lastName","emailAddress","userName","phoneNumber","startDate","endDate","address","cityId","zipCode","keyword","subject","message","useremail","fromuser","touser","providedIn","Config","APP_TITLE","API_OTHERS_KEY","BAD_REQUEST_STATUS","SUCCESS_STATUS","REGISTRATION_TITLE","SUPPORT_EMAIL","SUPPORT_PHONE","COMMON_ERROR","FORGOT_PASSWORD_TITLE","RESET_PASSWORD_TITLE","CHANGE_PASSWORD_TITLE","NOT_FOUND_TITLE","SUPERADMIN_TITLE","CLINIC_TITLE","TITLE_SEPRATOR","LOGIN_TITLE","BAD_AUTH_STATUS","USERNAME_REQUIRED_VALIDATION_MSG","EMAIL_REQUIRED_VALIDATION_MSG","EMAIL_FORMAT_VALIDATION_MSG","PASSWORD_REQUIRED_VALIDATION_MSG","PASSWORD_NOT_VALID_VALIDATION_MSG","PASSWORD_MISMATCH_VALIDATION_MSG","CONFIRM_PASSWORD_REQUIRED_VALIDATION_MSG","RESET_PASSWORD_SUCCESS_MSG","PAGE_RELOAD_TIMEOUT_SECONDS","SPINNER_TIMEOUT_SECONDS","BLOCK_UI_TIMEOUT_SECONDS","BLOCK_UI_UPDATE_TIMEOUT_SECONDS","AUTHORIZATION_NOT_VALID_STATUS","ALERT_AUTO_REMOVE_TIME","DEFAULT_PAGE_SIZE","FORGOT_PASSWORD_SUCCESS_MSG","PASSWORD_REGX","SIDEBAR_LOGO_PATH","PROFILE_NO_IMG_PATH","UNDER_CONSTRUCTION_IMG_PATH","CLINIC_UNDER_CONSTRUCTION_IMG_PATH","CLINIC_LOGO_DEFAULT_IMG_PATH","OLD_PASSWORD_REQUIRED_VALIDATION_MSG","NEW_PASSWORD_REQUIRED_VALIDATION_MSG","NEW_PASSWORD_NOT_VALID_VALIDATION_MSG","NEW_PASSWORD_MISMATCH_VALIDATION_MSG","SWAL_LOGOUT_TITLE","SWAL_LOGOUT_TEXT","SWAL_LOGOUT_CONFIRM_BUTTON_TEXT","PLEASE_FILL_REQUIRED_FIELD_MSG","UNAME_PATTERN","UNAME_NOT_VALID_MESSAGE","KEYWORD_PATTERN","KEYWORD_NOT_VALID_MESSAGE","CLNAME_PATTERN","CLNAME_NOT_VALID_MESSAGE","NAME_PATTERN","NAME_NOT_VALID_MESSAGE","PHONE_PATTERN","ZIP_PATTERN","PHONE_NOT_VALID_MESSAGE","ZIP_NOT_VALID_MESSAGE","EMAIL_PATTERN","EMAIL_NOT_VALID_MESSAGE","STATUS_UPDATED_SUCCESSFULLY","DOCUMENT_ADDED_SUCCESSFULLY","DOCUMENT_UPDATED_SUCCESSFULLY","DOCUMENT_DELETED_SUCCESSFULLY","ROLE_ADDED_SUCCESSFULLY","ROLE_UPDATED_SUCCESSFULLY","ROLE_DELETED_SUCCESSFULLY","CLAIM_ADDED_SUCCESSFULLY","CLAIM_UPDATED_SUCCESSFULLY","CLAIM_DELETED_SUCCESSFULLY","PROFILE_UPDATED_SUCCESSFULLY","CLINIC_ACCUOUNT_EXPIRED","PROFILE_IMG_S3_PATH","DOC_IMG_S3_PATH","MESSAGE_SEND_SUCCESSFULLY","STATUS","environment","production","apiUrl","AdminclinicAuthGuard","currentClinic","RoleService","roleId","title","description","AdminclinicAuthService","username","password","setItem","removeItem","clear","email","confirmPassword","resetToken","oldPassword","newPassword","BlockElementModule","imports","declarations","exports","entryComponents","BlockTemplateComponent","styles","template","AuthGuard","authService","currentUser","AuthenticationclinicService","userSubject","user","value","AppComponent","blockUIService","defaultMessage","blockInstances","blockUI","start","setTimeout","stop","elementBlockUI","messages","i","interval","setInterval","update","length","clearInterval","selector","templateUrl","styleUrls","UserService","userId","postData","claimNo","wcabNo","CommonService","titleService","pageTitle","setTitle","accessToken","appKey","subDomain","reqType","httpOptions","replace","headers","routerUrl","returnUrl","includes","DEFAULT_PERFECT_SCROLLBAR_CONFIG","suppressScrollX","wheelSpeed","wheelPropagation","AppModule","provide","useValue","useClass","multi","forRoot","delayStop","requestFilters","providers","bootstrap","AdminAuthService","BusinessService","businessId","SpinnerComponent","document","isSpinnerVisible","backgroundColor","events","event","encapsulation","None","Document","PatientService","dateOfBirth","contctInfo","appAttorney","employer","defAttorney","doctorId","medproId","supplementaryWcabno","claimId","contactInfo","patientId","Status","documentId","documentNote","expectedDate","ErrorInterceptor","adminAuthService","adminclinicAuthService","request","handle","pipe","indexOf","status","logout","error","statusText","NotFoundComponent","setPageTitle","snapshot","data","AuthenticationService","fullURL","window","location","host","split","routes","push","path","redirectTo","pathMatch","loadChildren","then","m","ClinicModule","canActivateChild","component","SuperAdminModule","AppRoutingModule","forChild","AuthclinicGuard","authclinicService","BlockElementComponent","bootstrapModule","webpackEmptyAsyncContext","req","e","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Config } from '../constant';\n@Injectable()\nexport class AdminAuthGuard implements CanActivate {\n    constructor(\n        private router: Router\n    ) {}\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):boolean {\n        let url: string = state.url;\n        return this.checkLogin(url);\n    }\n    checkLogin(url: string): boolean {\n        let currentSuperAdmin = JSON.parse(localStorage.getItem('currentSuperAdmin'));\n        if (!currentSuperAdmin || !currentSuperAdmin.id) {\n            this.router.navigate(['/superadmin/login']);\n            return false;\n        }\n        return true;\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/add/operator/timeout';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from  '../constant';\nimport { Router } from '@angular/router';\nimport { CommonService } from '../_services/common.service';\n//import { Client } from '../_models/client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n  private loggedIn = new BehaviorSubject<boolean>(false);\n    get isSuperAdminLoggedIn() {\n        let currentSuperAdmin = JSON.parse(localStorage.getItem('currentSuperAdmin'));\n        if (currentSuperAdmin && currentSuperAdmin.id) {\n            this.loggedIn.next(true);    \n        }\n        return this.loggedIn.asObservable();\n    }\n\n    constructor(private http: HttpClient,\n        private router: Router,\n        private commonService: CommonService) { \n    }\n    \n    getProfileById(clientId: number) {\n        let requestData = {\n            \"userId\":clientId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'client/get-profile', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getCountries() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'country-list', this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n     }\n     \n    getStatesById(countryId: number) {\n        let requestData = {\n            \"country_id\":countryId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'state-list-by-country-id', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getCitiesById(stateId: number) {\n      let requestData = {\n          \"state_id\":stateId\n      }\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'city-list-by-state-id', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    getClients() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'client/list', this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n    }\n    \n    getMessages() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'client/message-list', this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n    }\n    \n    getarchivedClients() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'client/archived-list', this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n    }\n    \n    deleteClient(id: number) {      \n      let requestData = {\n          \"id\":id\n      }      \n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'client/delete', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              console.log(res);\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    updateStatus(id: number) {      \n      let requestData = {\n          \"id\":id\n      }      \n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'client/update-status', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              console.log(res);\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n\n     \n     clientRegister(clinicName: string, firstName: string, lastName:string,emailAddress: string, userName: string, phoneNumber:string,startDate: string, endDate: string, address:string,countryId: string, stateId: string, cityId:string, zipCode: string, keyword:string) {\n        let requestData = {\n            \"clinic_name\":clinicName,\n            \"first_name\":firstName,\n            \"last_name\":lastName,\n            \"email\":emailAddress,\n            \"username\":userName,\n            \"phone_number\":phoneNumber,\n            \"start_date\":startDate,\n            \"end_date\":endDate,\n            \"address\":address,\n            \"country_id\":countryId,\n            \"state_id\":stateId,\n            \"city_id\":cityId,\n            \"zip_code\":zipCode,\n            \"keyword\":keyword\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'client/create', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    clientUpdate(clinicName: string, firstName: string, lastName:string,emailAddress: string, userName: string, phoneNumber:string,startDate: string, endDate: string, address:string,countryId: string, stateId: string, cityId:string, zipCode: string, keyword:string, clientId: string) { \n        let requestData = {\n            \"clinic_name\":clinicName,\n            \"first_name\":firstName,\n            \"last_name\":lastName,\n            \"email\":emailAddress,\n            \"username\":userName,\n            \"phone_number\":phoneNumber,\n            \"start_date\":startDate,\n            \"end_date\":endDate,\n            \"address\":address,\n            \"country_id\":countryId,\n            \"state_id\":stateId,\n            \"city_id\":cityId,\n            \"zip_code\":zipCode,\n            \"keyword\":keyword,\n            \"clientId\":clientId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'client/edit-client', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    sendMessage(subject: string, message: string, useremail: string, fromuser: string, touser: string) {\n      let requestData = {\n          \"subject\":subject,\n          \"message\":message,\n          \"useremail\":useremail,\n          \"fromuser\":fromuser,\n          \"touser\":touser\n      }\n      //console.log(this.commonService.getHttpOptions(localStorage.getItem('currentClinic'),Config.API_OTHERS_KEY));\n      //console.log(Config.API_OTHERS_KEY);\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'client/client-send-message', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    //getClient(id: number) {\n    //     return new Promise((resolve, reject) => {\n    //         this.http.get(Config.API_BASE_PATH+'client/getProfile' + id, this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY))\n    //         .timeout(Config.TIMEOUT_SECONDS)\n    //         .subscribe(res => {\n    //             console.log(res);\n    //             resolve(res);\n    //         }, (err) => {\n    //             reject(err);\n    //         });\n    //     });\n    // }\n    //\n    //clientUpdate(client, id: number) {\n    //    let requestData = {\n    //        \"old_password\":oldPassword,\n    //        \"new_password\":newPassword,\n    //        \"confirm_new_password\":confirmPassword\n    //    }\n    //    return new Promise((resolve, reject) => {\n    //        this.http.post(Config.API_BASE_PATH+'client/create' + id, JSON.stringify(client), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY))\n    //        .timeout(Config.TIMEOUT_SECONDS)\n    //        .subscribe(res => {\n    //            resolve(res);\n    //        }, (err) => {\n    //            reject(err);\n    //        });\n    //    });\n    //}\n    //\n    //clientDelete(id: number) {\n    //    let requestData = {\n    //        \"old_password\":oldPassword,\n    //        \"new_password\":newPassword,\n    //        \"confirm_new_password\":confirmPassword\n    //    }\n    //    return new Promise((resolve, reject) => {\n    //        this.http.delete(Config.API_BASE_PATH+'client/delete' + id, this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY))\n    //        .timeout(Config.TIMEOUT_SECONDS)\n    //        .subscribe(res => {\n    //            resolve(res);\n    //        }, (err) => {\n    //            reject(err);\n    //        });\n    //    });\n    //}\n  \n}\n","export * from './authclinic.guard';\nexport * from './adminclinic.auth.guard';","export const Config = {\n\tAPI_BASE_PATH : 'http://34.237.70.31/medirecx-dev-api/api/v1/',\n\t//API_BASE_PATH : 'http://localhost:1337/api/v1/',\n\tAPP_TITLE : 'MediRecX',\n\tTIMEOUT_SECONDS: 3000000000000,\n\tAPI_SUPERADMIN_KEY : \"bXktZW4tcHJvLWRldmVsb3BtZW50LXNlY3JldC1rZXlAMjAxOSE=\",\n\t//API_CLINIC_KEY : \"bXktZW4tcHJvLWRldmVsb3BtZW50LXNlY3JldC1rZXlAMjAxOSE=\",\n\tAPI_OTHERS_KEY : \"aHC$kykHa=aZHC#yZZkA$#HyHaCkH=k#akHkkZ$C$ZaAakHZ\",\n\tBAD_REQUEST_STATUS : 400 ,\n\tSUCCESS_STATUS : 200 ,\n\tREGISTRATION_TITLE: \"Registration\",\n\tSUPPORT_EMAIL: \"support@medirecx.com\",\n\tSUPPORT_PHONE: \"+1 408 655 7179\",\n\tCOMMON_ERROR : 'Something went wrong, please try again later.',\n\tFORGOT_PASSWORD_TITLE: \"Forgot Password\",\n\tRESET_PASSWORD_TITLE: \"Reset Password\",\n\tCHANGE_PASSWORD_TITLE: \"Change Password\",\n\tNOT_FOUND_TITLE: \"404 Not Found\",\n\tSUPERADMIN_TITLE: \"Super Admin\",\n\tCLINIC_TITLE: \"Clinic Title\",\n\tTITLE_SEPRATOR: \" :: \",\n\tLOGIN_TITLE: \"Login\",\n\tBAD_AUTH_STATUS: 401,\n\tUSERNAME_REQUIRED_VALIDATION_MSG: \"Username is required.\",\n\tEMAIL_REQUIRED_VALIDATION_MSG: \"Email is required.\",\n\tEMAIL_FORMAT_VALIDATION_MSG: \"Email address is not vaild.\",\n\tPASSWORD_REQUIRED_VALIDATION_MSG: \"Password is required.\",\n\tPASSWORD_NOT_VALID_VALIDATION_MSG: \"Password should be minimum 8 characters & maximum 16 characters long, alphanumeric, with 1 special character.\",\n\tPASSWORD_MISMATCH_VALIDATION_MSG: \"Password and Confirm Password are not same.\",\n\tCONFIRM_PASSWORD_REQUIRED_VALIDATION_MSG: \"Confirm Password is required.\",\n\tRESET_PASSWORD_SUCCESS_MSG: \"Password has been reset/changed successfully.\",\n\tPAGE_RELOAD_TIMEOUT_SECONDS:500,\n\tSPINNER_TIMEOUT_SECONDS: 100,\n\tBLOCK_UI_TIMEOUT_SECONDS: 2000,\n\tBLOCK_UI_UPDATE_TIMEOUT_SECONDS:850,\n\tAUTHORIZATION_NOT_VALID_STATUS:501,\n\tALERT_AUTO_REMOVE_TIME:2000,\n\tDEFAULT_PAGE_SIZE:10,\n\tFORGOT_PASSWORD_SUCCESS_MSG: \"Please check your email as we have sent you a link to reset your password.\",\n\tPASSWORD_REGX: \"(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*]).{8,16}\",\n\tSIDEBAR_LOGO_PATH: \"assets/img/favicon.png\",\n\tPROFILE_NO_IMG_PATH: \"assets/img/profile-no-img.jpg\",\n\tUNDER_CONSTRUCTION_IMG_PATH: \"assets/img/under-construction-img.jpg\",\t\n\tCLINIC_UNDER_CONSTRUCTION_IMG_PATH: \"assets/img/clinic_uc.png\",\n\tCLINIC_LOGO_DEFAULT_IMG_PATH: \"assets/img/clinic.png\",\n\tOLD_PASSWORD_REQUIRED_VALIDATION_MSG: \"Old Password is required.\",\n\tNEW_PASSWORD_REQUIRED_VALIDATION_MSG: \"New Password is required.\",\n\tNEW_PASSWORD_NOT_VALID_VALIDATION_MSG: \"New Password should be minimum 8 characters & maximum 16 characters long, alphanumeric, with 1 special character.\",\n\tNEW_PASSWORD_MISMATCH_VALIDATION_MSG: \"New Password and Confirm Password are not same.\",\n\tSWAL_LOGOUT_TITLE: \"Ready to Leave?\",\n\tSWAL_LOGOUT_TEXT: \"Select \\\"Logout\\\" below if you are ready to end your current session.\",\n\tSWAL_LOGOUT_CONFIRM_BUTTON_TEXT: \"Logout\",\n\tPLEASE_FILL_REQUIRED_FIELD_MSG : \"Please fill the required fields.\",\n\tUNAME_PATTERN: \"^[a-z0-9_-]{8,16}$\",\n\tUNAME_NOT_VALID_MESSAGE: \"Username should be minimum 8 characters & maximum 16 characters long with alphanumeric.\",\n\tKEYWORD_PATTERN: \"^[a-z0-9]{3,16}$\",\n\tKEYWORD_NOT_VALID_MESSAGE: \"Keyword should be minimum 3 characters & maximum 16 characters long with small characters and number only.\",\n\tCLNAME_PATTERN: \"^[a-zA-Z0-9_ -]{4,20}$\",\n\tCLNAME_NOT_VALID_MESSAGE: \"Clinic name should be minimum 4 characters & maximum 20 characters long with alphanumeric.\",\n\tNAME_PATTERN: \"^(?=.{3,16}$)[a-zA-Z]+(?:[-'\\s][a-zA-Z]+)*$\",\n\tNAME_NOT_VALID_MESSAGE: \"Name should be minimum 3 characters & maximum 16 characters long with alphabate.\",\n\tPHONE_PATTERN: \"^((\\\\+91-?)|0)?[0-9]{10}$\",\n\tZIP_PATTERN: \"^[0-9]{6}\",\n\tPHONE_NOT_VALID_MESSAGE: \"Phone number should of 10 character numeric only.\",\n\tZIP_NOT_VALID_MESSAGE: \"Zip code should of 6 character numeric only.\",\n\tEMAIL_PATTERN: \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\",\n\tEMAIL_NOT_VALID_MESSAGE: \"Please enter valid email format.\",\n\tSTATUS_UPDATED_SUCCESSFULLY: \"Status updated successfully.\",\t\n\tDOCUMENT_ADDED_SUCCESSFULLY: \"Document added successfully.\",\n\tDOCUMENT_UPDATED_SUCCESSFULLY: \"Document updated successfully.\",\n\tDOCUMENT_DELETED_SUCCESSFULLY: \"Document deleted successfully.\",\t\n\tROLE_ADDED_SUCCESSFULLY: \"Role added successfully.\",\n\tROLE_UPDATED_SUCCESSFULLY: \"Role updated successfully.\",\n\tROLE_DELETED_SUCCESSFULLY: \"Role deleted successfully.\",\n\tCLAIM_ADDED_SUCCESSFULLY: \"Claim added successfully.\",\n\tCLAIM_UPDATED_SUCCESSFULLY: \"Claim updated successfully.\",\n\tCLAIM_DELETED_SUCCESSFULLY: \"Status updated successfully.\",\n\tPROFILE_UPDATED_SUCCESSFULLY: \"Profile updated successfully.\",\n\tCLINIC_ACCUOUNT_EXPIRED: \"Account expired. Please contact to administrator.\",\n\tPROFILE_IMG_S3_PATH: \"https://medirecx.s3.amazonaws.com/user-avtar/\",\n\tDOC_IMG_S3_PATH: \"https://medirecx.s3.amazonaws.com/document/\",\n\tMESSAGE_SEND_SUCCESSFULLY: \"Message sent successfully.\",\n\tSUBDOMAIN: \"\",\n\tSTATUS:\"<html><body><ul><li>Uploaded</li><li> Sent to Medpro</li><li>Sent to Doctor</li><li>Reviewed by Medpro</li><li>Reviewed by Doctor</li><li>Doctor sent to medpro</li><li>Medpro sent to clinic</li><li>Completed</li><li>Inactive</li></ul></body></html>\"\n\t\n}\n\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://ec2-34-237-70-31.compute-1.amazonaws.com/medirecx-dev-api/api/v1/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Config } from '../constant';\n@Injectable()\nexport class AdminclinicAuthGuard implements CanActivate {\n    constructor(\n        private router: Router\n    ) {}\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):boolean {\n        let url: string = state.url;\n        return this.checkLogin(url);\n    }\n    checkLogin(url: string): boolean {\n        let currentClinic = JSON.parse(localStorage.getItem('currentClinic'));\n        if (!currentClinic || !currentClinic.id) {\n            this.router.navigate(['/clinic/login']);\n            return false;\n        }\n        return true;\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/add/operator/timeout';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from  '../constant';\nimport { Router } from '@angular/router';\nimport { CommonService } from '../_services/common.service';\n//import { Client } from '../_models/client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleService {\n  private loggedIn = new BehaviorSubject<boolean>(false);\n    get isClinicLoggedIn() {\n        let currentClinic = JSON.parse(localStorage.getItem('currentClinic'));\n        if (currentClinic && currentClinic.id) {\n            this.loggedIn.next(true);    \n        }\n        return this.loggedIn.asObservable();\n    }\n  \n    constructor(private http: HttpClient,\n        private router: Router,\n        private commonService: CommonService) { \n    }\n    \n    getRoleById(roleId: number) {\n        let requestData = {\n            \"roleId\":roleId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'role/get-role', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getRoles() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'role/list?domain=\"clinic\"', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n    }\n    \n    //getarchivedClients() {\n    //     return new Promise((resolve, reject) => {\n    //         this.http.get(Config.API_BASE_PATH+'client/archivedlist', this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY))\n    //         .timeout(Config.TIMEOUT_SECONDS)\n    //         .subscribe(res => {\n    //             console.log(res);\n    //             resolve(res);\n    //         }, (err) => {\n    //             reject(err);\n    //         });\n    //     });\n    //}\n    \n    deleteRole(id: number) {      \n      let requestData = {\n          \"id\":id\n      }      \n      return new Promise((resolve, reject) => {\n        this.http.post(Config.API_BASE_PATH+'role/delete-role', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n        .subscribe(res => {\n            resolve(res);\n        }, (err) => {\n            reject(err);\n        });\n      });\n    }\n    \n    updateStatus(id: number) {      \n      let requestData = {\n          \"roleId\":id\n      }      \n      return new Promise((resolve, reject) => {\n        this.http.post(Config.API_BASE_PATH+'role/update-role-status', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n        .subscribe(res => {\n            resolve(res);\n        }, (err) => {\n            reject(err);\n        });\n      });\n    }\n\n     \n    roleRegister(title: string, description: string) {\n      let requestData = {\n          \"title\":title,\n          \"description\":description\n      }\n      console.log(this.commonService.getHttpOptions(localStorage.getItem('currentClinic'),Config.API_OTHERS_KEY));\n      //console.log(Config.API_OTHERS_KEY);\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'role/add-role', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    roleUpdate(title: string, description: string, roleId: string) {\n        let requestData = {\n            \"title\":title,\n            \"description\":description,\n            \"id\":roleId\n        }\n        //console.log(requestData);\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'role/edit-role', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/add/operator/timeout';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from  '../constant';\nimport { Router } from '@angular/router';\nimport { CommonService } from '../_services/common.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminclinicAuthService {\n    private loggedIn = new BehaviorSubject<boolean>(false);\n    get isClinicLoggedIn() {\n        let currentClinic = JSON.parse(localStorage.getItem('currentClinic'));\n        if (currentClinic && currentClinic.id) {\n            this.loggedIn.next(true);    \n        }\n        return this.loggedIn.asObservable();\n    }\n\n    constructor(private http: HttpClient,\n        private router: Router,\n        private commonService: CommonService) { \n    }\n    \n    login(username: string, password: string) { \n        let requestData = {\n            'username':username,\n            'password':password\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'clinic/login', JSON.stringify(requestData), this.commonService.getHttpOptions(null,Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => { //console.log(res[\"data\"]);\n                if(res[\"status\"]==Config.SUCCESS_STATUS){\n                    this.loggedIn.next(true);\n                    localStorage.setItem('currentClinic', JSON.stringify(res[\"data\"]));\n                    localStorage.setItem('currentClinicToken',JSON.stringify(res[\"data\"][\"token\"]));\n                    resolve(res);\n                }else{\n                    resolve(res);\n                }\n            }, (err) => { \n                reject(err);\n            });\n        });\n    }\n    \n    logout() {\n        localStorage.removeItem('currentClinic');\n        localStorage.removeItem('currentClinicToken');\n        localStorage.clear();\n        this.loggedIn.next(false);\n        this.router.navigate(['/clinic/login']);\n    }\n\n    forgotPassword(email: string) {\n        let requestData = {\n            'email':email\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'clinic/forgot-password', JSON.stringify(requestData), this.commonService.getHttpOptions(null,Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n\n    resetPassword(password: string, confirmPassword: string, resetToken:string) {\n        let requestData = {\n            \"password\":password,\n            \"confirm_password\":confirmPassword,\n            \"reset_token\":resetToken\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'clinic/reset-password', JSON.stringify(requestData), this.commonService.getHttpOptions(null,Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n\n    changePassword(oldPassword: string, newPassword: string, confirmPassword:string) {\n        let requestData = {\n            \"old_password\":oldPassword,\n            \"new_password\":newPassword,\n            \"confirm_new_password\":confirmPassword\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'clinic/change-password', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n\n    // refreshToken() {\n    //     return new Promise((resolve, reject) => {\n    //         this.http.get(Config.API_BASE_PATH+'superadmin/refresh-token', this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY))\n    //         .timeout(Config.TIMEOUT_SECONDS)\n    //         .subscribe(res => {\n    //             console.log(res);\n    //             resolve(res);\n    //         }, (err) => {\n    //             reject(err);\n    //         });\n    //     });\n    // }\n\n    // userProfile(accessToken:string) {\n    //     return new Promise((resolve, reject) => {\n    //         this.http.get(Config.API_BASE_PATH+'AppUsers/user-profile', this.commonService.getHttpOptions(accessToken))\n    //         .timeout(Config.TIMEOUT_SECONDS)\n    //         .subscribe(res => {\n    //             resolve(res);\n    //         }, (err) => {\n    //             reject(err);\n    //         });\n    //     });\n    // }\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BlockUIModule } from 'ng-block-ui';\n\nimport { BlockElementComponent } from './block-element.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    BlockUIModule\n  ],\n  declarations: [\n    BlockElementComponent\n  ],\n  exports: [\n    BlockElementComponent\n  ],\n  entryComponents: [ BlockElementComponent ]\n})\nexport class BlockElementModule { }","import { Component } from '@angular/core';\n@Component({\n  styles: [`\n    :host {\n      color: #fff;\n    }\n  `],\n  template: `\n    <div class=\"block-ui-template\">\n      <div class=\"preloader\">\n        <div class=\"spinner\">\n          <div class=\"double-bounce1\"></div>\n          <div class=\"double-bounce2\"></div>\n        </div>\n      </div>\n    </div>\n  `,\n})\nexport class BlockTemplateComponent {\n  constructor() {}\n}","export * from './authentication.service';\nexport * from './authenticationclinic.service';\nexport * from './user.service';\nexport * from './common.service';\nexport * from './admin.auth.service';\nexport * from './adminclinic.auth.service';\nexport * from './client.service';\nexport * from './patient.service';\nexport * from './role.service';\nexport * from './business.service';","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../_services/authentication.service';\nimport { Config } from '../constant';\n@Injectable()\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private authService: AuthenticationService,\n        private router: Router\n    ) {}\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):boolean {\n        let url: string = state.url;\n        return this.checkLogin(url);\n    }\n    checkLogin(url: string): boolean {\n        let currentUser = JSON.parse(localStorage.getItem('currentUser'));\n        if (!currentUser || !currentUser.id) {\n            this.router.navigate(['/login']);\n            return false; \n        }\n        return true;\n    }\n}","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { User } from '@app/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthenticationclinicService {\n    private userSubject: BehaviorSubject<User>;\n    public user: Observable<User>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        this.userSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('user')));\n        this.user = this.userSubject.asObservable();\n    }\n\n    public get userValue(): User {\n        return this.userSubject.value;\n    }\n\n     login(email: string, password: string) {\n     //let headers = new HttpHeaders();\n     //headers = headers.append('Content-Type', 'application/json');\n     //headers = headers.append('appkey', 'bXktZW4tcHJvLWRldmVsb3BtZW50LXNlY3JldC1rZXlAMjAxOSE=');\n     //    return this.http.post<any>(`${environment.apiUrl}/superadmin/login`, { email, password },{ headers })\n     //        .pipe(map(user => {\n     //      \n     //            // store user details and jwt token in local storage to keep user logged in between page refreshes\n     //            localStorage.setItem('user', JSON.stringify(user));\n     //            this.userSubject.next(user);\n     //            return user;\n     //        }));\n     }\n\n    logout() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('user');\n        this.userSubject.next(null);\n        this.router.navigate(['/login']);\n    }\n    // forgotPassword(email: string) {\n    //  console.log(email)\n    //     // remove user from local storage to log user out\n    //     let headers = new HttpHeaders();\n    // headers = headers.append('Content-Type', 'application/json');\n    // headers = headers.append('appkey', 'bXktZW4tcHJvLWRldmVsb3BtZW50LXNlY3JldC1rZXlAMjAxOSE=');\n    //     return this.http.post<any>(`${environment.apiUrl}/superadmin/forgot-password`, { email},{ headers })\n    //         .pipe(map(res => {\n    //             return res;\n    //         }));\n       \n    // }\n    \n    \n}","import { Component, ComponentRef, OnInit } from '@angular/core';\nimport { BlockUI, NgBlockUI, BlockUIService } from 'ng-block-ui';\nimport { Config }from './constant';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n    @BlockUI() blockUI: NgBlockUI;\n    @BlockUI('block-element') elementBlockUI: NgBlockUI;\n    defaultMessage: string = 'Default Message...';\n    timeout: number = Config.BLOCK_UI_TIMEOUT_SECONDS;\n    blockInstances = ['block-element', 'block-element-2', 'block-element-3'];\n    constructor(\n        private blockUIService: BlockUIService\n    ) {\n    }\n    blockMain(message: string) {\n        this.blockUI.start(message);\n        setTimeout((blockUI) => {\n            this.blockUI.stop();\n        }, this.timeout);\n    }\n\n    blockElement() {\n        this.elementBlockUI.start();\n        setTimeout((blockUI) => {\n          this.elementBlockUI.stop();\n        }, this.timeout);\n    }\n\n    blockAllElements() {\n        this.blockUIService.start(this.blockInstances, 'Loading All');\n        setTimeout((blockUI) => {\n          this.blockUIService.stop(this.blockInstances);\n        }, this.timeout);\n    }\n\n    blockUpdate() {\n        let messages: string[] = ['Logining In', 'Loading Settings', 'Loading Widgets'],\n          i = 0,\n          interval: any;\n\n        this.elementBlockUI.start('Welcome');\n\n        interval = setInterval(() => {\n          this.elementBlockUI.update(messages[i]);\n          i++;\n\n          if (i > messages.length) {\n            this.elementBlockUI.stop();\n            clearInterval(interval);\n          }\n        }, Config.BLOCK_UI_UPDATE_TIMEOUT_SECONDS);\n    }\n\n    ngOnInit() {\n    }\n}\n","<block-ui>\n\t<router-outlet>\n\t    <app-spinner></app-spinner>\n\t</router-outlet>\n</block-ui>\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/add/operator/timeout';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from  '../constant';\nimport { Router } from '@angular/router';\nimport { CommonService } from '../_services/common.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    private loggedIn = new BehaviorSubject<boolean>(false);\n    get isClinicLoggedIn() {\n        let currentClinic = JSON.parse(localStorage.getItem('currentClinic'));\n        if (currentClinic && currentClinic.id) {\n            this.loggedIn.next(true);    \n        }\n        return this.loggedIn.asObservable();\n    }\n  \n    constructor(private http: HttpClient,\n        private router: Router,\n        private commonService: CommonService) { \n    }\n    \n    getUserById(userId: number) {\n        let requestData = {\n            \"userId\":userId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'user/get-profile', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getUsers() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'user/list', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n    }\n    \n    getMessages() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'user/message-list', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n    }\n    \n    //getarchivedClients() {\n    //     return new Promise((resolve, reject) => {\n    //         this.http.get(Config.API_BASE_PATH+'client/archivedlist', this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY))\n    //         .timeout(Config.TIMEOUT_SECONDS)\n    //         .subscribe(res => {\n    //             console.log(res);\n    //             resolve(res);\n    //         }, (err) => {\n    //             reject(err);\n    //         });\n    //     });\n    //}\n    \n    deleteUser(id: number) {      \n      let requestData = {\n          \"id\":id\n      }      \n      return new Promise((resolve, reject) => {\n        this.http.post(Config.API_BASE_PATH+'user/delete-user', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n        .subscribe(res => {\n            resolve(res);\n        }, (err) => {\n            reject(err);\n        });\n      });\n    }\n    \n    updateStatus(id: number) {      \n      let requestData = {\n          \"userId\":id\n      }      \n      return new Promise((resolve, reject) => {\n        this.http.post(Config.API_BASE_PATH+'user/update-user-status', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n        .subscribe(res => {\n            resolve(res);\n        }, (err) => {\n            reject(err);\n        });\n      });\n    }\n\n     \n    //userRegister(firstName: string, lastName:string,emailAddress: string, phoneNumber:string,username: string, password: string, dateOfBirth: string, role: string, address:string,countryId: string, stateId: string, cityId:string, zipCode: string, emergencyContact:string, maritialStatus:string, profileImage:string) {\n    //    let requestData = {\n    //        \"first_name\":firstName,\n    //        \"last_name\":lastName,\n    //        \"email\":emailAddress,           \n    //        \"username\":username,\n    //        \"password\":password,\n    //        \"role_id\":role,\n    //        \"phone_number\":phoneNumber,  \n    //        \"address\":address,\n    //        \"country_id\":countryId,\n    //        \"state_id\":stateId,\n    //        \"city_id\":cityId,\n    //        \"zip_code\":zipCode,\n    //        \"image_url \":profileImage,            \n    //        \"date_of_birth \":dateOfBirth,\n    //        \"emergency_contact\":emergencyContact,\n    //        \"marital_status\":maritialStatus\n    //    }\n    //  return new Promise((resolve, reject) => {\n    //      this.http.post(Config.API_BASE_PATH+'user/add-user', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY))\n    //      .timeout(Config.TIMEOUT_SECONDS)\n    //      .subscribe(res => {\n    //          resolve(res);\n    //      }, (err) => {\n    //          reject(err);\n    //      });\n    //  });\n    //}\n    \n    userRegister( postData: any){\n        \n          return new Promise((resolve, reject) => {\n              this.http.post(Config.API_BASE_PATH+'user/add-user', postData, this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN,'image'))\n              .timeout(Config.TIMEOUT_SECONDS)\n              .subscribe(res => {\n                  resolve(res);\n              }, (err) => {\n                  reject(err);\n              });\n          });\n    \n    }\n    \n    userUpdate( postData: any) {\n        \n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'user/edit-user', postData, this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN,'image'))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getRoles() {\n        return new Promise((resolve, reject) => {\n            this.http.get(Config.API_BASE_PATH+'role/list', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                console.log(res);\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getCountries() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'country-list?subdomain=sms', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n     }\n     \n    getStatesById(countryId: number) {\n        let requestData = {\n            \"country_id\":countryId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'state-list-by-country-id', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getCitiesById(stateId: number) {\n      let requestData = {\n          \"state_id\":stateId\n      }\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'city-list-by-state-id', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    sendMessage(subject: string, message: string, useremail: string, fromuser: string, touser: string,claimNo?:string,wcabNo?:string) {\n      let requestData = {\n          \"subject\":subject,\n          \"message\":message,\n          \"useremail\":useremail,\n          \"fromuser\":fromuser,\n          \"touser\":touser,\n          \"claim_no\":claimNo,\n          \"wcab_no\":wcabNo\n      }\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'user/user-send-message', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n}","export * from './error.interceptor';","import { Injectable} from '@angular/core';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { Title } from '@angular/platform-browser';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Config }from '../constant';\nimport { ValidatorFn, AbstractControl } from '@angular/forms';\n\n@Injectable()\nexport class CommonService {\n\thttpOptions:any;\n    currentUser: any;\n    returnUrl: string;\n    accessToken: string;\n    constructor(\n        private http: HttpClient, \n        private titleService: Title,  \n        private router: Router, \n        private route: ActivatedRoute) { \n    }\n    setPageTitle(pageTitle){\n        this.titleService.setTitle(Config.APP_TITLE+Config.TITLE_SEPRATOR+pageTitle);\n    }\n    // getPageUrl(url){\n    // \treturn '/'+url;\n    // }\n    getHttpOptions(accessToken=null,appKey,subDomain=null,reqType=null){\n        let httpOptions:any = {};\n\t\t//console.warn(Config.SUBDOMAIN);\n\t\t//console.warn(accessToken);\n        subDomain = Config.SUBDOMAIN;\n        if(accessToken && accessToken.length > 0 && reqType == 'image'){\n\t\t\t//console.warn(\"inside\");\n            accessToken = accessToken.replace(/(^\"|\"$)/g, '');\n            httpOptions = {\n                headers: new HttpHeaders({ \n                    //'Content-Type': 'application/json; charset=utf-8',\n\t\t\t\t\t//'Content-Type': undefined,\n                    //'Accept': 'application/json',\n                    'Authorization': 'Bearer '+accessToken,\n                    'appkey': appKey,\n\t\t\t\t\t'subDomain': subDomain\n                })\n            };    \n            return httpOptions;\n        }else  if(accessToken && accessToken.length > 0){\n\t\t\t//console.warn(\"outside\");\n            accessToken = accessToken.replace(/(^\"|\"$)/g, '');\n            httpOptions = {\n                headers: new HttpHeaders({ \n                    'Content-Type': 'application/json; charset=utf-8',\n                    'Accept': 'application/json',\n\t\t\t\t\t'Authorization': 'Bearer '+accessToken,\n                    'appkey': appKey,\n\t\t\t\t\t'subDomain' : subDomain\n                })\n            };    \n            return httpOptions;\n        }else{\n            httpOptions = {\n                headers: new HttpHeaders({ \n                    'Content-Type': 'application/json; charset=utf-8',\n                    'Accept': 'application/json',\n                    'appKey': appKey,\n\t\t\t\t\t'subDomain' : subDomain\n                })\n            };    \n            return httpOptions;\n        }\n\t}\n    // reloadUrl(returnUrl){\n    //     setTimeout(()=>{\n    //         this.router.navigate([returnUrl])\n    //     }, Config.PAGE_RELOAD_TIMEOUT_SECONDS);\n    // }\n    // checkLogin(){\n    //     let currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    //     let routerUrl = this.router.url;\n    //     let returnUrl = routerUrl || '/';\n    //     if (currentUser && currentUser.id) {\n    //         if(routerUrl.includes(Config.LOGIN_URL) || routerUrl.includes(Config.FORGOT_PASSWORD_URL) || routerUrl.includes(Config.REGISTRATION_VERIFY_URL) || routerUrl.includes(Config.RESET_PASSWORD_URL)){\n    //             this.router.navigate(['/']);\n    //         }else{\n    //             this.router.navigate([returnUrl]);\n    //         }\n    //     }else{\n    //         if(!routerUrl.includes(Config.FORGOT_PASSWORD_URL) && !routerUrl.includes(Config.REGISTRATION_VERIFY_URL) && !routerUrl.includes(Config.RESET_PASSWORD_URL)){\n    //             this.router.navigate([returnUrl+'login']);\n    //         }\n    //     }\n    // }\n    checkSuperAdminLogin(){\n        let currentSuperAdmin = JSON.parse(localStorage.getItem('currentSuperAdmin'));\n        let routerUrl = this.router.url;\n        let returnUrl = routerUrl || '/';\n        if (currentSuperAdmin && currentSuperAdmin.id) {\n            if(routerUrl.includes('login') || routerUrl.includes('forgot-password') || routerUrl.includes('reset-password')){\n                this.router.navigate(['/']);\n            }else{\n                this.router.navigate([returnUrl]);\n            }\n        }else{\n            if(!routerUrl.includes('forgot-password') && !routerUrl.includes('reset-password')){\n                this.router.navigate([returnUrl+'login']);\n            }\n        }\n    }\n\n    commonSuperAdminLogout(){\n        localStorage.removeItem('currentSuperAdmin');\n        localStorage.removeItem('currentSuperAdminToken');\n        localStorage.clear();\n        return true;\n    }\n    \n    getLoggedInSuperAdminData(){\n        return JSON.parse(localStorage.getItem('currentSuperAdmin'));\n    }\n\t\n\t/************************** Clinic Module Service ******************/\n\t\n\tcheckClinicLogin(){\n        let currentClinic = JSON.parse(localStorage.getItem('currentClinic'));\n        let routerUrl = this.router.url;\n        let returnUrl = routerUrl || '/';\n        if (currentClinic && currentClinic.id) {\n            if(routerUrl.includes('login') || routerUrl.includes('forgot-password') || routerUrl.includes('reset-password')){\n                this.router.navigate(['/']);\n            }else{\n                this.router.navigate([returnUrl]);\n            }\n        }else{\n            if(!routerUrl.includes('forgot-password') && !routerUrl.includes('reset-password')){\n                this.router.navigate([returnUrl+'login']);\n            }\n        }\n    }\n\n    commonClinicLogout(){\n        localStorage.removeItem('currentClinic');\n        localStorage.removeItem('currentClinicToken');\n        localStorage.clear();\n        return true;\n    }\n    \n    getLoggedInClinicData(){\n        return JSON.parse(localStorage.getItem('currentClinic'));\n    }\n\n    // getLoggedInUserData(){\n    //     return JSON.parse(localStorage.getItem('currentUserDetails'));\n    // }\n\n    \n\n    // commonLogout(){\n    //     localStorage.removeItem('currentUser');\n    //     localStorage.removeItem('currentUserDetails');\n    //     localStorage.clear();\n    //     return true;\n    // }\n\n    // getPageSizeOptions(){\n    //     const pageSizeoptions = [5, 10, 20, 50, 100];\n    //     return pageSizeoptions;  \n    // }\n\n    // getDefaultPageSize(){\n    //     const defaultPageSize = Config.DEFAULT_PAGE_SIZE;\n    //     return defaultPageSize;  \n    // }\n    // validateContactFile(file:any){\n    //     if(file.type != Config.UPLOAD_CONTACT_VALID_FILE_FORMAT){\n    //         return Config.CONTACT_FILE_FORMAT_VALIDATION_MESSAGE;\n    //     }if(parseInt(file.size) > Config.UPLOAD_CONTACT_VALID_FILE_SIZE){\n    //         return Config.CONTACT_FILE_SIZE_VALIDATION_MESSAGE;\n    //     }\n    //     return true;\n    // }\n    \n    // validateFile(file:any){\n    //     if(parseInt(file.size) > Config.UPLOAD_CONTACT_VALID_FILE_SIZE){\n    //         return Config.CONTACT_FILE_SIZE_VALIDATION_MESSAGE;\n    //     }\n    //     return true;\n    // }\n\n    \n\n    // checkAdmin(){\n    //     let currentUserDetails = JSON.parse(localStorage.getItem('currentUserDetails'));\n    //     // if(currentUserDetails && currentUserDetails.roleInfo && currentUserDetails.roleInfo.name && currentUserDetails.roleInfo.name == Config.ADMIN_STR){\n    //     //     return true;\n    //     // }\n    //     return false;\n    // }\n\n    /*dateFormatForGetGroupLives(date){\n        var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n        if (month.length < 2) month = '0' + month;\n        if (day.length < 2) day = '0' + day;\n        return [year, month, day].join('-');\n    }*/\n}","import { BrowserModule, Title} from '@angular/platform-browser';\nimport { HttpClientModule, HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule, LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AppRoutingModule } from './app-routing.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ErrorInterceptor } from './_helpers';\nimport { ToastrModule } from 'ngx-toastr';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { PerfectScrollbarModule, PERFECT_SCROLLBAR_CONFIG, PerfectScrollbarConfigInterface } from 'ngx-perfect-scrollbar';\nimport { BlockUIModule } from 'ng-block-ui';\nimport { BlockUIRouterModule, BlockUIPreventNavigation } from 'ng-block-ui/router';\nimport { BlockUIHttpModule } from 'ng-block-ui/http';\nimport { BlockElementModule } from './block-element/block-element.module';\nimport { BlockTemplateComponent } from './block-template/block-template.component';\nimport { SpinnerComponent } from './shared/spinner/spinner.component';\nimport { AdminAuthGuard } from './_guards';\nimport { AdminclinicAuthGuard } from './_guardsclinic';\nimport { CommonService } from './_services';\nconst DEFAULT_PERFECT_SCROLLBAR_CONFIG: PerfectScrollbarConfigInterface = {\n  suppressScrollX: true,\n  wheelSpeed: 2,\n  wheelPropagation: true,\n};\n@NgModule({\n    declarations: [\n        AppComponent,\n        NotFoundComponent,\n        BlockTemplateComponent,\n        SpinnerComponent\n    ],\n\timports: [\n\t\tCommonModule,\n        BrowserModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n        RouterModule.forRoot([]),\n        AppRoutingModule,\n        ReactiveFormsModule,\n        ToastrModule.forRoot(),\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tPerfectScrollbarModule,\n\t\tBlockElementModule,\n\t    BlockUIModule.forRoot({\n      \t\tmessage: '',\n            delayStop: 3000,\n      \t\ttemplate: BlockTemplateComponent\n    \t}),\n        BlockUIRouterModule.forRoot(),\n        BlockUIHttpModule.forRoot({\n            requestFilters: []\n        })\n    ],\n\tentryComponents: [\n        BlockTemplateComponent\n    ],\n    providers: [\n\t\t{\n            provide: PERFECT_SCROLLBAR_CONFIG,\n            useValue: DEFAULT_PERFECT_SCROLLBAR_CONFIG\n        },\n        {\n            provide: LocationStrategy,\n            useClass: PathLocationStrategy\n        },\n        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n        Title,\n        AdminAuthGuard,\n        AdminclinicAuthGuard,\n        CommonService\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/add/operator/timeout';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from  '../constant';\nimport { Router } from '@angular/router';\nimport { CommonService } from '../_services/common.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminAuthService {\n    private loggedIn = new BehaviorSubject<boolean>(false);\n    get isSuperAdminLoggedIn() {\n        let currentSuperAdmin = JSON.parse(localStorage.getItem('currentSuperAdmin'));\n        if (currentSuperAdmin && currentSuperAdmin.id) {\n            this.loggedIn.next(true);    \n        }\n        return this.loggedIn.asObservable();\n    }\n\n    constructor(private http: HttpClient,\n        private router: Router,\n        private commonService: CommonService) { \n    }\n    \n    login(username: string, password: string) { console.log(\"superadmin login\");\n        let requestData = {\n            'email':username,\n            'password':password\n        }\n        return new Promise((resolve, reject) => {\n          console.log(Config.API_BASE_PATH);\n            this.http.post(Config.API_BASE_PATH+'superadmin/login', JSON.stringify(requestData), this.commonService.getHttpOptions(null,Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                if(res[\"status\"]==Config.SUCCESS_STATUS){\n                    this.loggedIn.next(true);\n                    localStorage.setItem('currentSuperAdmin', JSON.stringify(res[\"data\"]));\n                    localStorage.setItem('currentSuperAdminToken',JSON.stringify(res[\"data\"][\"token\"]));\n                    resolve(res);\n                }else{\n                    resolve(res);\n                }\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    logout() {\n        localStorage.removeItem('currentSuperAdmin');\n        localStorage.removeItem('currentSuperAdminToken');\n        localStorage.clear();\n        this.loggedIn.next(false);\n        this.router.navigate(['/superadmin/login']);\n    }\n\n    forgotPassword(email: string) {\n        let requestData = {\n            'email':email\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'superadmin/forgot-password', JSON.stringify(requestData), this.commonService.getHttpOptions(null,Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n\n    resetPassword(password: string, confirmPassword: string, resetToken:string) {\n        let requestData = {\n            \"password\":password,\n            \"confirm_password\":confirmPassword,\n            \"reset_token\":resetToken\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'superadmin/reset-password', JSON.stringify(requestData), this.commonService.getHttpOptions(null,Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n\n    changePassword(oldPassword: string, newPassword: string, confirmPassword:string) {\n        let requestData = {\n            \"old_password\":oldPassword,\n            \"new_password\":newPassword,\n            \"confirm_new_password\":confirmPassword\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'superadmin/change-password', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n\n    // refreshToken() {\n    //     return new Promise((resolve, reject) => {\n    //         this.http.get(Config.API_BASE_PATH+'superadmin/refresh-token', this.commonService.getHttpOptions(localStorage.getItem('currentSuperAdminToken'),Config.API_SUPERADMIN_KEY))\n    //         .timeout(Config.TIMEOUT_SECONDS)\n    //         .subscribe(res => {\n    //             console.log(res);\n    //             resolve(res);\n    //         }, (err) => {\n    //             reject(err);\n    //         });\n    //     });\n    // }\n\n    // userProfile(accessToken:string) {\n    //     return new Promise((resolve, reject) => {\n    //         this.http.get(Config.API_BASE_PATH+'AppUsers/user-profile', this.commonService.getHttpOptions(accessToken))\n    //         .timeout(Config.TIMEOUT_SECONDS)\n    //         .subscribe(res => {\n    //             resolve(res);\n    //         }, (err) => {\n    //             reject(err);\n    //         });\n    //     });\n    // }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/add/operator/timeout';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from  '../constant';\nimport { Router } from '@angular/router';\nimport { CommonService } from '../_services/common.service';\n//import { Client } from '../_models/client';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BusinessService {\n  private loggedIn = new BehaviorSubject<boolean>(false);\n    get isClinicLoggedIn() {\n        let currentClinic = JSON.parse(localStorage.getItem('currentClinic'));\n        if (currentClinic && currentClinic.id) {\n            this.loggedIn.next(true);    \n        }\n        return this.loggedIn.asObservable();\n    }\n  \n    constructor(private http: HttpClient,\n        private router: Router,\n        private commonService: CommonService) { \n    }\n    \n    getBusinessById(businessId: number) {\n        let requestData = {\n            \"businessId\":businessId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'business/get-business', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    businessUpdate( postData: any) {\n        \n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'business/edit-business', postData, this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN,'image'))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n        \n    //businessUpdate(clinicname: string, firstname: string, lastname: string, emailaddress: string, phonenumber: string, address: string, zip: string, businessId: string) {\n    //  let requestData = {\n    //      \"clinicname\":clinicname,\n    //      \"firstname\":firstname,\n    //      \"lastname\":lastname,\n    //      \"emailaddress\":emailaddress,\n    //      \"phonenumber\":phonenumber,\n    //      \"address\":address,\n    //      \"zip\":zip,\n    //      \"businessid\":businessId\n    //  }\n    //  //console.log(requestData);\n    //  return new Promise((resolve, reject) => {\n    //      this.http.post(Config.API_BASE_PATH+'business/edit-business', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n    //      .timeout(Config.TIMEOUT_SECONDS)\n    //      .subscribe(res => {\n    //          resolve(res);\n    //      }, (err) => {\n    //          reject(err);\n    //      });\n    //  });\n    //}\n    \n     getCountries() {\n         return new Promise((resolve, reject) => {\n             this.http.get(Config.API_BASE_PATH+'country-list?subdomain=sms', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n             .timeout(Config.TIMEOUT_SECONDS)\n             .subscribe(res => {\n                 console.log(res);\n                 resolve(res);\n             }, (err) => {\n                 reject(err);\n             });\n         });\n     }\n     \n    getStatesById(countryId: number) {\n        let requestData = {\n            \"country_id\":countryId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'state-list-by-country-id', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getCitiesById(stateId: number) {\n      let requestData = {\n          \"state_id\":stateId\n      }\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'city-list-by-state-id', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n}\n","import { Component, Input, OnDestroy, Inject, ViewEncapsulation } from '@angular/core';\nimport { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';\nimport { DOCUMENT } from '@angular/common';\nimport { Config }from '../../constant';\n\n@Component({\n    selector: 'app-spinner',\n    templateUrl: './spinner.component.html',\n    styleUrls: ['./spinner.component.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class SpinnerComponent implements OnDestroy {\n    public isSpinnerVisible = true;\n   \n    @Input() public backgroundColor = 'rgba(0, 115, 170, 0.69)';\n    \n    constructor(private router: Router, @Inject(DOCUMENT) private document: Document) {\n        this.router.events.subscribe(event => {\n            if (event instanceof NavigationStart) {\n                this.isSpinnerVisible = true;\n            } else if ( event instanceof NavigationEnd || event instanceof NavigationCancel || event instanceof NavigationError) {\n                setTimeout(()=>{\n                    this.isSpinnerVisible = false;\n                },Config.SPINNER_TIMEOUT_SECONDS);\n            }\n        }, () => {\n            this.isSpinnerVisible = false;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.isSpinnerVisible = false;\n    }\n}\n","<div class=\"preloader\" *ngIf=\"isSpinnerVisible\">\n    <div class=\"spinner\">\n      <div class=\"double-bounce1\"></div>\n      <div class=\"double-bounce2\"></div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport 'rxjs/add/operator/timeout';\nimport { BehaviorSubject } from 'rxjs';\nimport { Config } from  '../constant';\nimport { Router } from '@angular/router';\nimport { CommonService } from '../_services/common.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientService {\n  private loggedIn = new BehaviorSubject<boolean>(false);\n    get isClinicLoggedIn() {\n        let currentClinic = JSON.parse(localStorage.getItem('currentClinic'));\n        if (currentClinic && currentClinic.id) {\n            this.loggedIn.next(true);    \n        }\n        return this.loggedIn.asObservable();\n    }\n  \n    constructor(private http: HttpClient,\n        private router: Router,\n        private commonService: CommonService) { \n    }\n  \n    getDoctors() {\n      return new Promise((resolve, reject) => {\n          this.http.get(Config.API_BASE_PATH+'patient/list-doctors', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              //console.log(res);\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    getStatus() {\n        return new Promise((resolve, reject) => {\n            this.http.get(Config.API_BASE_PATH+'patient/list-status', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                //console.log(res);\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n      }\n    \n    getMedpros() {\n      return new Promise((resolve, reject) => {\n          this.http.get(Config.API_BASE_PATH+'patient/list-medpros', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              //console.log(res);\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    patientRegister(firstName: string, lastName:string, dateOfBirth: string, contctInfo: string,wcabNo: string,claimNo:string,appAttorney: string,employer: string,defAttorney: string, doctorId:string,medproId: string,supplementaryWcabno:string | null) {\n        let requestData = {\n            \"first_name\":firstName,\n            \"last_name\":lastName,\n            \"date_of_birth\":dateOfBirth,\n            \"contact_info\":contctInfo,\n            \"case_no\":wcabNo,\n            \"claim_no\":claimNo,\n            \"applicant_attorney\":appAttorney,\n            \"employer\":employer,\n            \"defendant_attorney\":defAttorney,\n            \"doctor_id\":doctorId,\n            \"medpro_id\":medproId,\n            \"supplementary_wcabno\":supplementaryWcabno\n        }\n        //console.warn(requestData);\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'patient/add-patient', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n              console.log(res);\n                resolve(res);\n            }, (err) => {\n              console.log(err);\n                reject(err);\n            });\n        });\n    }\n    \n    getClaims(roleId: number) {\n      let requestData = {\n            \"roleId\":roleId\n        }\n       // console.log(roleId);\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'patient/list-claims', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              //console.log(res);\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    getArchivedClaims() {  //console.log(Config.SUBDOMAIN); \n      return new Promise((resolve, reject) => {\n          this.http.get(Config.API_BASE_PATH+'patient/list-archived-claims', this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              //console.log(res);\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    getClaimById(claimId: number) {\n        let requestData = {\n            \"claimId\":claimId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'patient/get-claim-detail', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    addDocument( postData: any) {\n      //console.log(postData);\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'patient/add-document', postData, this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN,'image'))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    getDocumentsByClaimId(claimId: number) {\n        let requestData = {\n            \"claimId\":claimId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'patient/list-document', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    claimUpdate(firstName: string, lastName: string, contactInfo: string, appAttorney: string, employer: string, defAttorney: string, patientId: string,dateOfBirth:string) {\n      let requestData = {\n          \"firstName\":firstName,\n          \"lastName\":lastName,\n          \"contactInfo\":contactInfo,\n          \"appAttorney\":appAttorney,\n          \"employer\":employer,\n          \"defAttorney\":defAttorney,\n          \"patientId\":patientId,\n          \"date_of_birth\":dateOfBirth\n      }\n      //console.log(requestData);\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'patient/edit-patient', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    deleteClaim(id: number) {      \n      let requestData = {\n          \"id\":id\n      }      \n      return new Promise((resolve, reject) => {\n        this.http.post(Config.API_BASE_PATH+'patient/delete-claim', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n        .subscribe(res => {\n            resolve(res);\n        }, (err) => {\n            reject(err);\n        });\n      });\n    }\n    \n    updateClaimStatus(id: number, roleId: number, claimId: number) {      \n      let requestData = {\n          \"userId\":id,\n          \"roleId\":roleId,\n          \"claimId\":claimId\n      }      \n      return new Promise((resolve, reject) => {\n        this.http.post(Config.API_BASE_PATH+'patient/update-claim-status', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n        .subscribe(res => {\n            resolve(res);\n        }, (err) => {\n            reject(err);\n        });\n      });\n    }\n    updateClaimStatusbyClaimId(claimId: number,Status:string) {      \n        let requestData = {\n            \"status\":Status,\n            \"claimId\":claimId\n        }      \n        return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'patient/update-status-claimId', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n        });\n      }\n    deleteDocument(id: number) {      \n      let requestData = {\n          \"id\":id\n      }      \n      return new Promise((resolve, reject) => {\n        this.http.post(Config.API_BASE_PATH+'patient/delete-document', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n        .subscribe(res => {\n            resolve(res);\n        }, (err) => {\n            reject(err);\n        });\n      });\n    }\n    \n    getDocumentById(documentId: number) {\n        let requestData = {\n            \"documentId\":documentId\n        }\n        return new Promise((resolve, reject) => {\n            this.http.post(Config.API_BASE_PATH+'patient/get-document-detail', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n            .timeout(Config.TIMEOUT_SECONDS)\n            .subscribe(res => {\n                resolve(res);\n            }, (err) => {\n                reject(err);\n            });\n        });\n    }\n    \n    documentUpdate(documentNote: string, expectedDate: string, documentId: string) {\n      let requestData = {\n          \"documentNote\":documentNote,\n          \"expectedDate\":expectedDate,\n          \"documentId\":documentId\n      }\n      //console.log(requestData);\n      return new Promise((resolve, reject) => {\n          this.http.post(Config.API_BASE_PATH+'patient/edit-document', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n          .subscribe(res => {\n              resolve(res);\n          }, (err) => {\n              reject(err);\n          });\n      });\n    }\n    \n    updateStatus(id: number) {      \n      let requestData = {\n          \"documentId\":id\n      }      \n      return new Promise((resolve, reject) => {\n        this.http.post(Config.API_BASE_PATH+'patient/update-document-status', JSON.stringify(requestData), this.commonService.getHttpOptions(localStorage.getItem('currentClinicToken'),Config.API_OTHERS_KEY,Config.SUBDOMAIN))\n          .timeout(Config.TIMEOUT_SECONDS)\n        .subscribe(res => {\n            resolve(res);\n        }, (err) => {\n            reject(err);\n        });\n      });\n    }\n    \n    \n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AdminAuthService } from '@app/_services';\nimport { AdminclinicAuthService } from '@app/_services';\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(private adminAuthService: AdminAuthService,\n                private adminclinicAuthService: AdminclinicAuthService) { }\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n            if ([401, 403].indexOf(err.status) !== -1) {\n                // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n                if(request[\"url\"].indexOf('superadmin') !== -1){\n                    this.adminAuthService.logout();\n                }else if(request[\"url\"].indexOf('clinic') !== -1){\n                    this.adminclinicAuthService.logout();\n                }else{\n                    //this.authenticationService.logout();    \n                }\n            }\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }))\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CommonService } from '../_services';\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor(private route : ActivatedRoute, private commonService : CommonService) { \n  \tthis.commonService.setPageTitle(this.route.snapshot.data['title']);\n  }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col-xl-6 col-lg-8 col-md-5\">\n      <div class=\"card o-hidden border-0 shadow-lg my-5\">\n        <div class=\"card-body p-0\">\n          <div class=\"row\">\n            <div class=\"col-lg-12\">\n              <div class=\"p-5\">\n                <div class=\"text-center\">\n                  <img src=\"assets/img/logo.png\" alt=\"app-logo\" class=\"logo\">\n                  <!-- <div class=\"error mx-auto\" data-text=\"404\">404</div> -->\n                  <div class=\"lead text-gray-800\" data-text=\"404\">404</div>\n                  <p class=\"lead text-gray-800 mb-5\">Page Not Found</p>\n                  <p class=\"text-gray-500 mb-0\">It looks like you found a glitch in the matrix...</p>\n                  <a href=\"\">&larr; Back</a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n  \n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { User } from '@app/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthenticationService {\n    private userSubject: BehaviorSubject<User>;\n    public user: Observable<User>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        this.userSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('user')));\n        this.user = this.userSubject.asObservable();\n    }\n\n    public get userValue(): User {\n        return this.userSubject.value;\n    }\n\n     login(email: string, password: string) {\n     //let headers = new HttpHeaders();\n     //headers = headers.append('Content-Type', 'application/json');\n     //headers = headers.append('appkey', 'bXktZW4tcHJvLWRldmVsb3BtZW50LXNlY3JldC1rZXlAMjAxOSE=');\n     //    return this.http.post<any>(`${environment.apiUrl}/superadmin/login`, { email, password },{ headers })\n     //        .pipe(map(user => {\n     //      \n     //            // store user details and jwt token in local storage to keep user logged in between page refreshes\n     //            localStorage.setItem('user', JSON.stringify(user));\n     //            this.userSubject.next(user);\n     //            return user;\n     //        }));\n     }\n\n    logout() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('user');\n        this.userSubject.next(null);\n        this.router.navigate(['/login']);\n    }\n    // forgotPassword(email: string) {\n    //  console.log(email)\n    //     // remove user from local storage to log user out\n    //     let headers = new HttpHeaders();\n    // headers = headers.append('Content-Type', 'application/json');\n    // headers = headers.append('appkey', 'bXktZW4tcHJvLWRldmVsb3BtZW50LXNlY3JldC1rZXlAMjAxOSE=');\n    //     return this.http.post<any>(`${environment.apiUrl}/superadmin/forgot-password`, { email},{ headers })\n    //         .pipe(map(res => {\n    //             return res;\n    //         }));\n       \n    // }\n    \n    \n}","export * from './auth.guard';\nexport * from './admin.auth.guard';","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { Config } from './constant';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { SuperAdminComponent } from './superadmin/superadmin.component';\nimport { ClinicComponent } from './clinic/clinic.component';\nimport { BlockUIPreventNavigation } from 'ng-block-ui/router';\nconst fullURL = (window.location.host).split('.');\n\nvar subDomain = '';\nconsole.log(`Full URL : ${fullURL}`);\nconsole.log(`Length of Full URL : ${fullURL.length}`);\nif(fullURL.length == 3){\n    subDomain = fullURL[0];\n    Config.SUBDOMAIN = 'medirecx_'+subDomain;\n}\nconsole.log(`Subdomain :${subDomain}`);\n//var subDomain = 'sms';\n//Config.SUBDOMAIN = 'medirecx_'+subDomain;\n\nvar routes: Routes = [];\nif(subDomain !== ''){\n    console.log('if');\n    //routes.push({\n    //    path: '404', \n    //    component: NotFoundComponent,\n    //    canActivateChild: [BlockUIPreventNavigation],\n    //    data: {\n    //        title:Config.NOT_FOUND_TITLE\n    //    }\n    //});\n    //routes.push({\n    //    path: '**', \n    //    redirectTo: '/404'\n    //});\n    \n    routes.push({\n        path: '',\n        redirectTo: '/clinic',\n        pathMatch: 'full'\n    });\n    routes.push({\n        path: 'clinic',\n        loadChildren: () => import('./clinic/clinic.module').then(m => m.ClinicModule),\n        data: { \n            title: Config.CLINIC_TITLE\n        },\n        canActivateChild: [BlockUIPreventNavigation],\n    });\n    routes.push({\n        path: '404', \n        component: NotFoundComponent,\n        canActivateChild: [BlockUIPreventNavigation],\n        data: {\n            title:Config.NOT_FOUND_TITLE\n        }\n    });\n    routes.push({\n        path: '**', \n        redirectTo: '404'\n    });\n}else{\n    console.log('else');\n    routes.push({\n        path: '',\n        redirectTo: '/superadmin',\n        pathMatch: 'full'\n    });\n    routes.push({\n        path: 'superadmin',\n        loadChildren: () => import('./superadmin/superadmin.module').then(m => m.SuperAdminModule),\n        data: { \n            title: Config.SUPERADMIN_TITLE\n        },\n        canActivateChild: [BlockUIPreventNavigation],\n    });\n    routes.push({\n        path: '404', \n        component: NotFoundComponent,\n        canActivateChild: [BlockUIPreventNavigation],\n        data: {\n            title:Config.NOT_FOUND_TITLE\n        }\n    });\n    routes.push({\n        path: '**', \n        redirectTo: '/404'\n    });\n}\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationclinicService } from '../_services/authenticationclinic.service';\nimport { Config } from '../constant';\n@Injectable()\nexport class AuthclinicGuard implements CanActivate {\n    constructor(\n        private authclinicService: AuthenticationclinicService,\n        private router: Router\n    ) {}\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):boolean {\n        let url: string = state.url;\n        return this.checkLogin(url);\n    }\n    checkLogin(url: string): boolean {\n        let currentUser = JSON.parse(localStorage.getItem('currentUser'));\n        if (!currentUser || !currentUser.id) {\n            this.router.navigate(['/login']);\n            return false; \n        }\n        return true;\n    }\n}","import { Component } from '@angular/core';\n@Component({\n  selector: 'block-element',\n  templateUrl: './block-element.component.html',\n  styleUrls: ['./block-element.component.css']\n})\nexport class BlockElementComponent {\n\n  constructor() { }\n\n}","<h1>MediRecX Block UI Element</h1>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.error(err));","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}