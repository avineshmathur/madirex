{"version":3,"sources":["webpack:///src/app/superadmin/auth/change-password.component.ts","webpack:///src/app/superadmin/auth/change-password.component.html","webpack:///src/app/superadmin/superadmin.component.ts","webpack:///src/app/superadmin/superadmin.component.html","webpack:///src/app/superadmin/layout/header/header.component.ts","webpack:///src/app/superadmin/layout/header/header.component.html","webpack:///src/app/superadmin/client/client-send-message.component.ts","webpack:///src/app/superadmin/client/client-send-message.component.html","webpack:///src/app/superadmin/auth/forgot-password.component.ts","webpack:///src/app/superadmin/auth/forgot-password.component.html","webpack:///src/app/superadmin/superadmin.module.ts","webpack:///src/app/superadmin/client/client-register.component.ts","webpack:///src/app/superadmin/client/client-register.component.html","webpack:///src/app/superadmin/layout/footer/footer.component.ts","webpack:///src/app/superadmin/layout/footer/footer.component.html","webpack:///src/app/superadmin/layout/sidebar/sidebar.component.ts","webpack:///src/app/superadmin/layout/sidebar/sidebar.component.html","webpack:///src/app/superadmin/client/client-update.component.ts","webpack:///src/app/superadmin/client/client-update.component.html","webpack:///src/app/superadmin/client/client-archived.component.ts","webpack:///src/app/superadmin/client/client-archived.component.html","webpack:///src/app/superadmin/layout/layout.component.ts","webpack:///src/app/superadmin/layout/layout.component.html","webpack:///src/app/superadmin/client/message.component.ts","webpack:///src/app/superadmin/client/message.component.html","webpack:///src/app/superadmin/auth/reset-password.component.ts","webpack:///src/app/superadmin/auth/reset-password.component.html","webpack:///src/app/superadmin/client/client.component.ts","webpack:///src/app/superadmin/client/client.component.html","webpack:///src/app/superadmin/auth/login.component.ts","webpack:///src/app/superadmin/auth/login.component.html"],"names":["ChangePasswordComponent","formBuilder","adminAuthService","toastr","spinner","router","route","commonService","loading","showErrors","attributes","validationMessages","OLD_PASSWORD_REQUIRED_VALIDATION_MSG","NEW_PASSWORD_REQUIRED_VALIDATION_MSG","NEW_PASSWORD_NOT_VALID_VALIDATION_MSG","CONFIRM_PASSWORD_REQUIRED_VALIDATION_MSG","NEW_PASSWORD_MISMATCH_VALIDATION_MSG","setPageTitle","snapshot","data","checkSuperAdminLogin","changePasswordForm","group","oldPassword","required","newPassword","pattern","PASSWORD_REGX","confirmPassword","validator","passwordMatchValidator","frm","controls","value","form","field","control","get","valid","messages","key","errors","show","changePassword","then","result","hide","success","RESET_PASSWORD_SUCCESS_MSG","reset","error","submit","selector","templateUrl","styleUrls","SuperAdminComponent","underConstructionImgPath","UNDER_CONSTRUCTION_IMG_PATH","HeaderComponent","currentDate","Date","appTitle","APP_TITLE","profileImgPath","PROFILE_NO_IMG_PATH","loggedInSuperAdminDetails","getLoggedInSuperAdminData","fire","title","SWAL_LOGOUT_TITLE","text","SWAL_LOGOUT_TEXT","icon","showCancelButton","confirmButtonText","SWAL_LOGOUT_CONFIRM_BUTTON_TEXT","allowOutsideClick","allowEscapeKey","allowEnterKey","isConfirmed","logout","ClientSendMessageComponent","clientService","PLEASE_FILL_REQUIRED_FIELD_MSG","userId","paramMap","getProfileById","resData","user","sendMessageForm","patchValue","useremail","email","fromuser","touser","id","subject","message","console","log","sendMessage","MESSAGE_SEND_SUCCESSFULLY","ForgotPasswordComponent","EMAIL_REQUIRED_VALIDATION_MSG","EMAIL_FORMAT_VALIDATION_MSG","forgotPasswordForm","forgotPassword","FORGOT_PASSWORD_SUCCESS_MSG","navigate","superAdminLoginTitle","SUPERADMIN_TITLE","TITLE_SEPRATOR","LOGIN_TITLE","superAdminForgotPasswordTitle","FORGOT_PASSWORD_TITLE","superAdminResetPasswordTitle","RESET_PASSWORD_TITLE","superAdminChangePasswordTitle","CHANGE_PASSWORD_TITLE","routes","path","component","canActivateChild","children","urls","url","canActivate","redirectTo","SuperAdminModule","forChild","imports","declarations","providers","ClientRegisterComponent","myDate","CLNAME_NOT_VALID_MESSAGE","NAME_NOT_VALID_MESSAGE","EMAIL_NOT_VALID_MESSAGE","UNAME_NOT_VALID_MESSAGE","PHONE_NOT_VALID_MESSAGE","ZIP_NOT_VALID_MESSAGE","KEYWORD_NOT_VALID_MESSAGE","getCountry","dte","formatDate","clientRegisterForm","country","state","city","clinicName","CLNAME_PATTERN","firstName","NAME_PATTERN","lastName","emailAddress","EMAIL_PATTERN","userName","UNAME_PATTERN","phoneNumber","PHONE_PATTERN","startDate","endDate","address","zipCode","ZIP_PATTERN","keyword","KEYWORD_PATTERN","getCountries","countries","countryId","getStatesById","states","stateList","cities","stateId","getCitiesById","cityList","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","clientRegister","event","target","onChangeCountry","onChangeState","onBlurEvent","FooterComponent","SidebarComponent","appLogo","SIDEBAR_LOGO_PATH","$","on","e","toggleClass","hasClass","collapse","window","resize","width","addClass","e0","originalEvent","delta","wheelDelta","detail","scrollTop","preventDefault","document","scrollDistance","fadeIn","fadeOut","$anchor","stop","animate","attr","offset","top","jQuery","ClientUpdateComponent","clientId","client","countryID","country_id","stateID","state_id","clientUpdateForm","clinic_name","first_name","last_name","username","phone_number","start_date","end_date","city_id","zip_code","status","getStatesByCountryId","getCitiesByStateId","clientUpdate","ClientArchivedComponent","getarchivedUsers","getarchivedClients","clients","LayoutComponent","config","isSuperAdminLoggedIn$","isSuperAdminLoggedIn","MessageComponent","dtOptions","dtTrigger","pagingType","pageLength","getMessages","unsubscribe","next","ResetPasswordComponent","PASSWORD_REQUIRED_VALIDATION_MSG","PASSWORD_NOT_VALID_VALIDATION_MSG","PASSWORD_MISMATCH_VALIDATION_MSG","resetToken","queryParams","resetPasswordForm","password","resetPassword","ClientComponent","getUsers","getClients","rowIndex","confirm","deleteClient","splice","rerender","updateStatus","setTimeout","location","reload","dtElement","dtInstance","destroy","LoginComponent","loginForm","login"],"mappings":"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","file":"superadmin-superadmin-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class ChangePasswordComponent implements OnInit {\n\tchangePasswordForm: FormGroup;\n    loading: boolean = false;\n    showErrors: number = 0;\n\n\tconstructor(private formBuilder: FormBuilder,\n    \tprivate adminAuthService: AdminAuthService,\n    \tprivate toastr: ToastrService,\n    \tprivate spinner: NgxSpinnerService,\n    \tprivate router : Router,\n    \tprivate route : ActivatedRoute,\n    \tprivate commonService : CommonService) { \n    this.commonService.setPageTitle(this.route.snapshot.data['title']);\n    this.commonService.checkSuperAdminLogin();\n\t}\n\n\tngOnInit() {\n\t\tthis.changePasswordForm = this.formBuilder.group({\n        \toldPassword: ['', Validators.required],\n    \t\tnewPassword: ['', [Validators.required , Validators.pattern(Config.PASSWORD_REGX)]],\n        \tconfirmPassword: ['', Validators.required]\n        },{validator: this.passwordMatchValidator});\n  \t}\n\n  \tpasswordMatchValidator(frm: FormGroup) {\n      return frm.controls['newPassword'].value === frm.controls['confirmPassword'].value ? null : {'mismatch': true};\n    }\n\n    attributes = {'oldPassword': '','newPassword': '','confirmPassword': ''};\n\tvalidationMessages = {\n\t\t'oldPassword': {\n      \t\t'required': Config.OLD_PASSWORD_REQUIRED_VALIDATION_MSG\n  \t\t},\n  \t\t'newPassword': {\n      \t\t'required': Config.NEW_PASSWORD_REQUIRED_VALIDATION_MSG,\n      \t\t'pattern': Config.NEW_PASSWORD_NOT_VALID_VALIDATION_MSG\n  \t\t},\n  \t\t'confirmPassword': {\n    \t\t'required': Config.CONFIRM_PASSWORD_REQUIRED_VALIDATION_MSG,\n    \t\t'mismatch' : Config.NEW_PASSWORD_MISMATCH_VALIDATION_MSG\n  \t\t}\n\t};\n\n\tsubmit() {\n  \t\tthis.loading = true;\n     \tthis.showErrors = 1;\n    \tconst form = this.changePasswordForm;\n    \tfor (const field in this.attributes) {\n      \t\tthis.attributes[field] = '';\n      \t\tconst control = form.get(field);\n      \t\tif (control && !control.valid) {\n        \t\tconst messages = this.validationMessages[field];\n        \t\tfor (const key in control.errors) {\n          \t\t\tif (this.attributes[field] == '') {\n              \t\t\tthis.attributes[field] += messages[key] + ' ';\n          \t\t\t}\n        \t\t}\n      \t\t}\n    \t}\n    \tif (this.changePasswordForm.valid) {\n    \t\tthis.showErrors = 0;\n        \tthis.spinner.show();\n    \t\tthis.adminAuthService.changePassword(this.changePasswordForm.get('oldPassword').value,this.changePasswordForm.get('newPassword').value,this.changePasswordForm.get('confirmPassword').value).then((result) => {\n    \t\t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n          \t\tif(result['message'] && result['message'] != ''){\n          \t\t\tthis.toastr.success(result['message']);\t\n          \t\t}else{\n          \t\t\tthis.toastr.success(Config.RESET_PASSWORD_SUCCESS_MSG);\n          \t\t}\n          \t\tthis.changePasswordForm.reset();\n          \t},error => {\n        \t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n        \t\tthis.changePasswordForm.reset();\n\t\t\t\tthis.toastr.error(error);\n     \t\t}); \n    \t}else{\n        \tthis.loading = false;\n      \t}\n\t}\n}","<div class=\"container-fluid\">\n  <!-- Page Heading -->\n  <div class=\"d-sm-flex align-items-center justify-content-between mb-4\">\n    <h1 class=\"h3 mb-0 text-gray-800\">Change Password</h1>\n  </div>\n  <!-- Content Row -->\n  <div class=\"row\">\n\t<div class=\"col-xl-12 col-md-12 mb-4\">\n      <div class=\"card shadow h-100 py-2\">\n        <div class=\"card-body\">\n          <div class=\"row no-gutters align-items-center\">\n            <div class=\"col \">\n            \t<form class=\"\" [formGroup]=\"changePasswordForm\" (ngSubmit)=\"submit()\" novalidate>\n    \t\t\t\t<div class=\"form-group\">\n        \t\t\t\t<div class=\"input-group\"> \n          \t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"inputOldPassword\" aria-describedby=\"oldPasswordHelp\" placeholder=\"Enter Old Password...\" formControlName=\"oldPassword\" [ngClass]=\"{ 'is-invalid': showErrors && !changePasswordForm.controls.oldPassword.valid }\">\n      \t\t\t\t\t\t<div *ngIf=\"showErrors && !changePasswordForm.controls.oldPassword.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.oldPassword }}\n\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t</div>\n          \t\t\t</div>\n          \t\t\t<div class=\"form-group\">\n        \t\t\t\t<div class=\"input-group\"> \n          \t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"inputNewPassword\" aria-describedby=\"newPasswordHelp\" placeholder=\"Enter New Password...\" formControlName=\"newPassword\" [ngClass]=\"{ 'is-invalid': showErrors && !changePasswordForm.controls.newPassword.valid }\">\n      \t\t\t\t\t\t<div *ngIf=\"showErrors && !changePasswordForm.controls.newPassword.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.newPassword }}\n\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t</div>\n          \t\t\t</div>\n        \t\t\t<div class=\"form-group\">\n        \t\t\t\t<div class=\"input-group\">\n          \t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"inputConfirmPassword\" aria-describedby=\"confirmPasswordHelp\" placeholder=\"Enter Confrim Password...\" formControlName=\"confirmPassword\" [ngClass]=\"{ 'is-invalid': showErrors && (!changePasswordForm.controls.confirmPassword.valid || changePasswordForm.hasError('mismatch'))}\">\n          \t\t\t\t\t<div *ngIf=\"showErrors && !changePasswordForm.controls.confirmPassword.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.confirmPassword }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div *ngIf=\"showErrors && changePasswordForm.controls.confirmPassword.valid\" [hidden]=\"!changePasswordForm.hasError('mismatch')\" class=\"invalid-feedback\">\n          \t\t\t\t\t\t<span *ngIf=\"changePasswordForm.hasError('mismatch')\">{{validationMessages.confirmPassword.mismatch}}\n          \t\t\t\t\t\t</span>\n      \t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n        \t\t\t</div>\n        \t\t\t<button type=\"submit\" class=\"btn btn-primary btn-block\">\n        \t\t\t\t<span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n        \t\t\t\tSubmit\n    \t\t\t\t</button>\n        \t\t</form>  \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Config } from './../constant';\nimport { CommonService } from '../_services';\n\n@Component({\n  selector: 'app-superadmin',\n  templateUrl: './superadmin.component.html',\n  styleUrls: ['./superadmin.component.css']\n})\n\nexport class SuperAdminComponent implements OnInit {\n  underConstructionImgPath: string = Config.UNDER_CONSTRUCTION_IMG_PATH;\n\tconstructor(\n\t\t  private route: ActivatedRoute,\n    \tprivate commonService : CommonService) { \n      this.commonService.setPageTitle(this.route.snapshot.data['title']);\n\t}\n\tngOnInit() {\n\n  \t}\n}","<div class=\"container-fluid\">\n  <!-- Page Heading -->\n  <div class=\"d-sm-flex align-items-center justify-content-between mb-4\">\n    <h1 class=\"h3 mb-0 text-gray-800\">Dashboard</h1>\n    <!-- <a href=\"#\" class=\"d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm\"><i class=\"fas fa-download fa-sm text-white-50\"></i> Generate Report</a> -->\n  </div>\n  <!-- Content Row -->\n  <div class=\"row\">\n    <div class=\"col-xl-12 col-md-12 mb-4\">\n      <div class=\"card shadow h-100 py-2\">\n        <div class=\"card-body\">\n          <div class=\"row no-gutters align-items-center\">\n            <div class=\"col text-center\">\n              <img [src]=\"underConstructionImgPath\" alt=\"under-construction-image\" class=\"img-fluid\"/>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Config } from '../../../constant';\nimport { AdminAuthService, CommonService } from '../../../_services';\nimport Swal from 'sweetalert2';\n@Component({\n  selector: 'superadmin-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\tcurrentDate : Date = new Date();\n\tappTitle: string = Config.APP_TITLE;\n\tloggedInSuperAdminDetails:any;\n\tprofileImgPath: string = Config.PROFILE_NO_IMG_PATH;\n\tconstructor( private commonService: CommonService, private adminAuthService: AdminAuthService ) { \n\t\tthis.loggedInSuperAdminDetails = this.commonService.getLoggedInSuperAdminData();\n\t}\n  \tngOnInit(): void {\n  \t}\n\n  \tlogout(){\n  \t\tSwal.fire({\n  \t\t\ttitle: Config.SWAL_LOGOUT_TITLE,\n  \t\t\ttext: Config.SWAL_LOGOUT_TEXT,\n\t\t\ticon: 'question',\n  \t\t\tshowCancelButton: true,\n  \t\t\tconfirmButtonText: Config.SWAL_LOGOUT_CONFIRM_BUTTON_TEXT,\n  \t\t\tallowOutsideClick: false,\n  \t\t\tallowEscapeKey: false,\n  \t\t\tallowEnterKey: false\n\t\t}).then((result) => {\n  \t\t\tif (result.isConfirmed) {\n    \t\t\tthis.adminAuthService.logout();\n  \t\t\t}\n\t\t})\n  \t}\n}\n","<nav class=\"navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow\">\n\t<!-- Sidebar Toggle (Topbar) -->\n\t<button id=\"sidebarToggleTop\" class=\"btn btn-link d-md-none rounded-circle mr-3\">\n\t\t<i class=\"fa fa-bars\"></i>\n\t</button>\n\t<!-- Topbar Navbar -->\n  \t<ul class=\"navbar-nav ml-auto\">\n\t\t<!-- <div class=\"topbar-divider d-none d-sm-block\"></div> -->\n\t\t<!-- Nav Item - User Information -->\n        <li class=\"nav-item dropdown no-arrow\">\n          <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"userDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            <span class=\"mr-2 d-none d-lg-inline text-gray-600 small\">{{ loggedInSuperAdminDetails.name }}</span>\n            <img class=\"img-profile rounded-circle\" [src]=\"profileImgPath\">\n          </a>\n          <!-- Dropdown - User Information -->\n          <div class=\"dropdown-menu dropdown-menu-right shadow animated--grow-in\" aria-labelledby=\"userDropdown\">\n            <a class=\"dropdown-item\" routerLink=\"change-password\">\n              <i class=\"fas fa-cogs fa-sm fa-fw mr-2 text-gray-400\"></i>\n              Change Password\n            </a>\n            <div class=\"dropdown-divider\"></div>\n            <a class=\"dropdown-item\" href=\"javascript:void(0);\" (click)=\"logout()\">\n              <i class=\"fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400\"></i>\n              Logout\n            </a>\n          </div>\n        </li>\n\t</ul>\n</nav>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService, ClientService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-client-send-message',\n  templateUrl: './client-send-message.component.html',\n  styleUrls: ['./client-send-message.component.less']\n})\nexport class ClientSendMessageComponent implements OnInit {\n  \n  sendMessageForm: FormGroup;\n  loading: boolean = false;\n  showErrors: number = 0;\n  resData: any;\n  user: any;\n\n  constructor(private formBuilder: FormBuilder,\n    private adminAuthService: AdminAuthService,\n    private clientService: ClientService,      \n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService,\n    private router : Router,\n    private route : ActivatedRoute,\n    private commonService : CommonService) { \n      this.commonService.setPageTitle(this.route.snapshot.data['title']);\n      this.commonService.checkSuperAdminLogin();\n    }\n\n\tngOnInit() {\n  const userId = this.route.snapshot.paramMap.get('id');\n    //getProfileById(clientId: number) {\n    if (userId) {\n      this.clientService.getProfileById(+userId).then((result) => {\n        \n        this.resData = result;\n        this.user = this.resData.data;\n        \n        this.sendMessageForm.patchValue({\n          useremail: this.user.email,\n          fromuser: \"1\",\n          touser: this.user.id\n        });\n      },error => {\n        this.spinner.hide();\n        this.loading = false;\n        this.toastr.error(error);\n      });\n      \n      \n    } else {\n      this.user = null;\n    }  \n    \n    this.sendMessageForm = this.formBuilder.group({\n      subject:  ['', Validators.required],\n      message: ['', Validators.required],      \n      useremail: ['', Validators.required],\n      fromuser: ['', Validators.required],\n      touser: ['', Validators.required]\n    });\n  }\n  \n  attributes = {'subject': '','message': '','useremail': ''};\n\tvalidationMessages = {\n      'subject': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'message': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'useremail': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'fromuser': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'touser': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t}\n\t};\n  \n  submit() {\n    console.log(this.attributes);\n  \t\tthis.loading = true;\n     \tthis.showErrors = 1;\n    \tconst form = this.sendMessageForm;\n    \tfor (const field in this.attributes) {\n      \t\tthis.attributes[field] = '';\n      \t\tconst control = form.get(field);\n      \t\tif (control && !control.valid) {\n        \t\tconst messages = this.validationMessages[field];\n        \t\tfor (const key in control.errors) {\n          \t\t\tif (this.attributes[field] == '') {\n              \t\t\tthis.attributes[field] += messages[key] + ' ';\n          \t\t\t}\n        \t\t}\n      \t\t}\n    \t}\n    \tif (this.sendMessageForm.valid) {\n    \t\tthis.showErrors = 0;\n        this.spinner.show();\n    \t\tthis.clientService.sendMessage(this.sendMessageForm.get('subject').value,this.sendMessageForm.get('message').value,this.sendMessageForm.get('useremail').value,this.sendMessageForm.get('fromuser').value,this.sendMessageForm.get('touser').value).then((result) => {\n    \t\t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n          \t\tif(result['message'] && result['message'] != ''){\n          \t\t\tthis.toastr.success(result['message']);\t\n          \t\t}else{\n          \t\t\tthis.toastr.success(Config.MESSAGE_SEND_SUCCESSFULLY);\n          \t\t}\n          \t\tthis.sendMessageForm.reset();\n          \t},error => {\n        \t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n\t\t\t\tthis.toastr.error(error);\n     \t\t}); \n    \t} else {\n        this.loading = false;\n      }\n\t}\n\n}","<div class=\"container-fluid\">\n  <!-- Page Heading -->\n  <div class=\"d-sm-flex align-items-center justify-content-between mb-4\">\n    <h1 class=\"h3 mb-0 text-gray-800\">Send Message</h1>\n  </div>\n\t<!--<tr *ngFor=\"let doctor of doctors\">\n      <th>{{doctor.first_name}}</th>\n\t</tr>-->\n  <!-- Content Row -->\n  <div class=\"row\">\n\t<div class=\"col-xl-12 col-md-12 mb-4\">\n      <div class=\"card shadow h-100 py-2\">\n        <div class=\"card-body\">\n          <div class=\"row no-gutters align-items-center\">\n            <div class=\"col \">\n\t\t\t\t<form class=\"\" [formGroup]=\"sendMessageForm\" (ngSubmit)=\"submit()\" novalidate>\n                    <div class=\"form-group row\">\n                        <input type=\"text\" class=\"form-control\" id=\"inputSubject\" aria-describedby=\"newPasswordHelp\" placeholder=\"Subject...\" formControlName=\"subject\" [ngClass]=\"{ 'is-invalid': showErrors && !sendMessageForm.controls.subject.valid }\">\n                        <div *ngIf=\"showErrors && !sendMessageForm.controls.subject.valid\" class=\"invalid-feedback\"> \n                            {{ attributes.subject }}\n                        </div>\n                    </div>\n                    \n                    <div class=\"form-group row\">                           \n                        <textarea type=\"textarea\" id=\"inputMessage\" aria-describedby=\"newPasswordHelp\" placeholder=\"Message...\" formControlName=\"message\" rows=\"8\" cols=\"100\" [ngClass]=\"{ 'is-invalid': showErrors && !sendMessageForm.controls.message.valid }\"></textarea>\n                        <div *ngIf=\"showErrors && !sendMessageForm.controls.message.valid\" class=\"invalid-feedback\"> \n                            {{ attributes.message }}\n                        </div>\t\n                    </div> \n                        <input type=\"hidden\" class=\"form-control\" id=\"inputId\" formControlName=\"useremail\">\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"hidden\" class=\"form-control\" id=\"inputId\" formControlName=\"fromuser\">\n\t\t\t\t\t\t\t\t\t\t\t\t<input type=\"hidden\" class=\"form-control\" id=\"inputId\" formControlName=\"touser\">  \n                    <button type=\"submit\" class=\"btn btn-primary btn-block\">\n                        <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                            Send Message\n                    </button>\n                    <hr>                \n              </form> \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./auth.component.css']\n})\n\nexport class ForgotPasswordComponent implements OnInit {\n\tforgotPasswordForm: FormGroup;\n    loading: boolean = false;\n    showErrors: number = 0;\n\tconstructor(private formBuilder: FormBuilder,\n    \tprivate adminAuthService: AdminAuthService,\n    \tprivate toastr: ToastrService,\n    \tprivate spinner: NgxSpinnerService,\n    \tprivate router : Router,\n      private route: ActivatedRoute,\n      \tprivate commonService : CommonService) { \n    this.commonService.setPageTitle(this.route.snapshot.data['title']);\n\t\tthis.commonService.checkSuperAdminLogin();\n\t}\n\tngOnInit() {\n\t\tthis.forgotPasswordForm = this.formBuilder.group({\n            email: ['', [Validators.required,Validators.email ] ]\n        });\n\t}\n\tattributes = {'email': ''};\n  \tvalidationMessages = {\n    \t'email': {\n      \t\t'required': Config.EMAIL_REQUIRED_VALIDATION_MSG,\n      \t\t'email': Config.EMAIL_FORMAT_VALIDATION_MSG\n\t  \t}\n  \t};\n  \tsubmit() {\n  \t\tthis.loading = true;\n     \tthis.showErrors = 1;\n    \tconst form = this.forgotPasswordForm;\n    \tfor (const field in this.attributes) {\n      \t\tthis.attributes[field] = '';\n      \t\tconst control = form.get(field);\n      \t\tif (control && !control.valid) {\n        \t\tconst messages = this.validationMessages[field];\n        \t\tfor (const key in control.errors) {\n          \t\t\tif (this.attributes[field] == '') {\n              \t\t\tthis.attributes[field] += messages[key] + ' ';\n          \t\t\t}\n        \t\t}\n      \t\t}\n    \t}\n    \tif (this.forgotPasswordForm.valid) {\n    \t\tthis.showErrors = 0;\n        \tthis.spinner.show();\n    \t\tthis.adminAuthService.forgotPassword(this.forgotPasswordForm.get('email').value).then((result) => {\n    \t\t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n          \t\tif(result['message'] && result['message'] != ''){\n          \t\t\tthis.toastr.success(result['message']);\t\n          \t\t}else{\n          \t\t\tthis.toastr.success(Config.FORGOT_PASSWORD_SUCCESS_MSG);\n          \t\t}\n          \t\tthis.router.navigate(['/superadmin/login']);\n  \t\t\t},error => {\n        \t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n        \t\tthis.forgotPasswordForm.reset();\n\t\t\t\tthis.toastr.error(error);\n     \t\t}); \n    \t}else{\n        \tthis.loading = false;\n      \t}\n\t}\n}","<div class=\"container\">\n\t<div class=\"row justify-content-center\">\n\t\t<div class=\"col-xl-6 col-lg-8 col-md-5\">\n\t\t\t<div class=\"card o-hidden border-0 shadow-lg my-5\">\n          \t\t<div class=\"card-body p-0\">\n            \t\t<div class=\"row\">\n              \t\t\t<div class=\"col-lg-12\">\n              \t\t\t\t<div class=\"p-5\">\n                  \t\t\t\t<div class=\"text-center\">\n                  \t\t\t\t\t<img src=\"assets/img/logo.png\" alt=\"app-logo\" class=\"logo\">\n                    \t\t\t\t<h1 class=\"h4 text-gray-900 mb-4\">Forgot Your Password?</h1>\n                    \t\t\t\t<p class=\"mb-4\">We get it, stuff happens. Just enter your email address below and we'll send you a link to reset your password!</p>\n                  \t\t\t\t</div>\n\t                  \t\t\t<form class=\"\" [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"submit()\" novalidate>\n\t                    \t\t\t<div class=\"form-group\">\n\t                      \t\t\t\t<input type=\"email\" class=\"form-control\" id=\"inputEmail\" aria-describedby=\"emailHelp\" placeholder=\"Enter Email Address...\" formControlName=\"email\" [ngClass]=\"{ 'is-invalid': showErrors && !forgotPasswordForm.controls.email.valid }\">\n\t                      \t\t\t\t<div *ngIf=\"showErrors && !forgotPasswordForm.controls.email.valid\" class=\"invalid-feedback\"> \n\t               \t\t\t\t\t\t\t{{ attributes.email }}\n\t            \t\t\t\t\t\t</div>  \n\t                    \t\t\t</div>\n\t                    \t\t\t<button type=\"submit\" class=\"btn btn-primary btn-block\">\n\t                    \t\t\t\t<span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n\t                    \t\t\t\tReset Password\n                    \t\t\t\t</button>\n\t                    \t\t</form>\n                  \t\t\t\t<hr>\n\t                  \t\t\t<div class=\"text-center\">\n\t                    \t\t\t<a class=\"small\" routerLink=\"./../login\">Already have an account? Login!</a>\n\t                  \t\t\t</div>\n\t                  \t\t</div>\n              \t\t\t</div>\n            \t\t</div>\n          \t\t</div>\n        \t</div>\n\t\t</div>\n\t</div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SuperAdminComponent } from './superadmin.component';\nimport { LoginComponent } from './auth/login.component';\nimport { ForgotPasswordComponent } from './auth/forgot-password.component';\nimport { ResetPasswordComponent } from './auth/reset-password.component';\nimport { ChangePasswordComponent } from './auth/change-password.component';\nimport { Config } from '../constant';\nimport { AdminAuthGuard } from '../_guards';\nimport { LayoutComponent } from './layout/layout.component';\nimport { SidebarComponent } from './layout/sidebar/sidebar.component';\nimport { FooterComponent } from './layout/footer/footer.component';\nimport { HeaderComponent } from './layout/header/header.component';\nimport { BlockUIPreventNavigation } from 'ng-block-ui/router';\nimport { ClientComponent } from './client/client.component';\nimport { ClientRegisterComponent } from './client/client-register.component';\nimport { ClientUpdateComponent } from './client/client-update.component';\nimport { ClientArchivedComponent } from './client/client-archived.component';\nimport { formatDate } from '@angular/common';\nimport { ClientSendMessageComponent } from './client/client-send-message.component';\n//import {MatDatepickerModule} from '@angular/material/datepicker'\n\nimport {DataTablesModule} from 'angular-datatables';\nimport { MessageComponent } from './client/message.component';\n\nconst superAdminLoginTitle = Config.SUPERADMIN_TITLE+Config.TITLE_SEPRATOR+Config.LOGIN_TITLE;\nconst superAdminForgotPasswordTitle = Config.SUPERADMIN_TITLE+Config.TITLE_SEPRATOR+Config.FORGOT_PASSWORD_TITLE;\nconst superAdminResetPasswordTitle = Config.SUPERADMIN_TITLE+Config.TITLE_SEPRATOR+Config.RESET_PASSWORD_TITLE;\nconst superAdminChangePasswordTitle = Config.SUPERADMIN_TITLE+Config.TITLE_SEPRATOR+Config.CHANGE_PASSWORD_TITLE;\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LayoutComponent,\n    canActivateChild: [BlockUIPreventNavigation],\n    children: [\n      {\n        path: '',\n        component: SuperAdminComponent,\n        data: {\n          title: Config.SUPERADMIN_TITLE,\n          urls: [{title: Config.SUPERADMIN_TITLE,url: '/superadmin'},{title: Config.SUPERADMIN_TITLE}]\n        },\n        canActivate: [AdminAuthGuard]\n      },\n      {\n        path: 'change-password',\n        component: ChangePasswordComponent,\n        data: {\n          title: superAdminChangePasswordTitle,\n          urls: [{title: superAdminChangePasswordTitle,url: '/superadmin/change-password'},{title: superAdminChangePasswordTitle}]\n        },\n        canActivate: [AdminAuthGuard],\n      },\n      {\n        path: 'client',\n        component: ClientComponent,\n        data: {\n          title: superAdminChangePasswordTitle,\n          urls: [{title: superAdminChangePasswordTitle,url: '/superadmin/client'},{title: superAdminChangePasswordTitle}]\n        },\n        canActivate: [AdminAuthGuard],\n      },\n      {\n        path: 'client-archived',\n        component: ClientArchivedComponent,\n        data: {\n          title: superAdminChangePasswordTitle,\n          urls: [{title: superAdminChangePasswordTitle,url: '/superadmin/client-archived'},{title: superAdminChangePasswordTitle}]\n        },\n        canActivate: [AdminAuthGuard],\n      },\n      {\n        path: 'client-register',\n        component: ClientRegisterComponent,\n        data: {\n          title: superAdminChangePasswordTitle,\n          urls: [{title: superAdminChangePasswordTitle,url: '/superadmin/client-register'},{title: superAdminChangePasswordTitle}]\n        },\n        canActivate: [AdminAuthGuard],\n      },\n      {\n        path: 'client-update/:id',\n        component: ClientUpdateComponent,\n        data: {\n          title: superAdminChangePasswordTitle,\n          urls: [{title: superAdminChangePasswordTitle,url: '/superadmin/client-update'},{title: superAdminChangePasswordTitle}]\n        },\n        canActivate: [AdminAuthGuard],\n      },\n      {\n        path: 'send-message/:id',\n        component: ClientSendMessageComponent,\n        data: {\n          title: superAdminChangePasswordTitle,\n          urls: [{title: superAdminChangePasswordTitle,url: '/superadmin/send-message'},{title: superAdminChangePasswordTitle}]\n        },\n        canActivate: [AdminAuthGuard],\n      },\n      {\n        path: 'messages',\n        component: MessageComponent,\n        data: {\n          title: superAdminChangePasswordTitle,\n          urls: [{title: superAdminChangePasswordTitle,url: '/superadmin/messages'},{title: superAdminChangePasswordTitle}]\n        },\n        canActivate: [AdminAuthGuard],\n      }\n    ]\n  },\n  {\n    path: '',\n    children: [\n      {\n        path: 'login',\n        component: LoginComponent,\n        data: {\n          title: superAdminLoginTitle,\n          urls: [{title: superAdminLoginTitle,url: '/superadmin/login'},{title: superAdminLoginTitle}]\n        }\n      } \n    ]\n  },\n  {\n    path: '',\n    children: [\n      {\n        path: 'forgot-password',\n        component: ForgotPasswordComponent,\n        data: {\n          title: superAdminForgotPasswordTitle,\n          urls: [{title: superAdminForgotPasswordTitle,url: '/superadmin/forgot-password'},{title: superAdminForgotPasswordTitle}]\n        }\n      } \n    ]\n  },\n  {\n    path: '',\n    children: [\n      {\n        path: 'reset-password',\n        component: ResetPasswordComponent,\n        data: {\n          title: superAdminResetPasswordTitle,\n          urls: [{title: superAdminResetPasswordTitle,url: '/superadmin/reset-password'},{title: superAdminResetPasswordTitle}]\n        }\n      } \n    ]\n  },\n  {\n    path:'**',\n    redirectTo:'/superadmin'\n  }\n];\n@NgModule({\n  imports: [\n    CommonModule, \n    RouterModule.forChild(routes),\n    FormsModule,\n   // MatDatepickerModule,\n    ReactiveFormsModule,\n    DataTablesModule\n  ],\n  declarations: [LayoutComponent,SuperAdminComponent,LoginComponent,ForgotPasswordComponent,ResetPasswordComponent,ChangePasswordComponent,SidebarComponent,FooterComponent,HeaderComponent, ClientComponent, ClientRegisterComponent, ClientUpdateComponent, ClientArchivedComponent, ClientSendMessageComponent, MessageComponent],\n  providers: [\n    \n  ],\n})\nexport class SuperAdminModule { }","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService, ClientService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-client-register',\n  templateUrl: './client-register.component.html',\n  styleUrls: ['./client-register.component.less']\n})\nexport class ClientRegisterComponent implements OnInit {\n\tclientRegisterForm: FormGroup;\n  loading: boolean = false;\n  showErrors: number = 0;\n  resData: any;\n  countries: {};\n  states: {};\n  cities: {};\t\n\tmyDate: any = '';\n\n\tconstructor(private formBuilder: FormBuilder,\n    private adminAuthService: AdminAuthService,\n    private clientService: ClientService,      \n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService,\n    private router : Router,\n    private route : ActivatedRoute,\n    private commonService : CommonService) { \n      this.commonService.setPageTitle(this.route.snapshot.data['title']);\n      this.commonService.checkSuperAdminLogin();\n    }\n\n\tngOnInit() {\n    this.getCountry();\n    let dte = new Date();\n\t\tthis.myDate = this.formatDate(dte);\n    this.clientRegisterForm = new FormGroup({\n      country: new FormControl(''),\n      state: new FormControl(''),\n      city: new FormControl('')\n    });\n    \n\t\tthis.clientRegisterForm = this.formBuilder.group({\n      clinicName: ['', [Validators.required , Validators.pattern(Config.CLNAME_PATTERN)]],\n      firstName: ['', [Validators.required , Validators.pattern(Config.NAME_PATTERN)]],\n      lastName: ['', [Validators.required , Validators.pattern(Config.NAME_PATTERN)]],\n      emailAddress: ['', [Validators.required , Validators.pattern(Config.EMAIL_PATTERN)]],\n      userName:  ['', [Validators.required , Validators.pattern(Config.UNAME_PATTERN)]],\n      phoneNumber: ['', [Validators.required , Validators.pattern(Config.PHONE_PATTERN)]],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n      address: ['', Validators.required ],\n      country: ['', Validators.required],\n      state: ['', Validators.required],\n      city: ['', Validators.required],\n      zipCode: ['', [Validators.required , Validators.pattern(Config.ZIP_PATTERN)]],\n      keyword: ['', [Validators.required , Validators.pattern(Config.KEYWORD_PATTERN)]],\n    });\n\n  }\n  \n  getCountry() {\n    this.clientService.getCountries().then((result) => {\n        this.resData = result;\n        this.countries = this.resData.data;\n        },error => {\n        this.spinner.hide();\n        this.loading = false;\n        this.toastr.error(error);\n    });\n  }\n  \n  onChangeCountry(countryId: number) {\n    if (countryId) {\n      this.clientService.getStatesById(countryId).then((result) => {\n        this.resData = result;\n        this.states = this.resData.data.stateList;\n        this.cities = null;\n      },error => {\n        this.spinner.hide();\n        this.loading = false;\n        this.toastr.error(error);\n      });      \n    } else {\n      this.states = null;\n      this.cities = null;\n    }\n  }\n\n  onChangeState(stateId: number) {\n    if (stateId) {\n      this.clientService.getCitiesById(stateId).then((result) => {\n        this.resData = result;\n        this.cities = this.resData.data.cityList;\n      },error => {\n        this.spinner.hide();\n        this.loading = false;\n        this.toastr.error(error);\n      });      \n    } else {\n      this.cities = null;\n    }\n  }\n\t\n\tprivate formatDate(date) { \n    const d = new Date(date);\n    let month = '' + (d.getMonth() + 1);\n    let day = '' + d.getDate();\n    const year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  }\n  \n  attributes = {'clinicName': '','firstName': '','lastName': '','emailAddress': '','userName': '','phoneNumber': '','startDate': '','endDate': '','address': '','country': '','state': '','city': '','zipCode': '','keyword': ''};\n\tvalidationMessages = {\n      'clinicName': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.CLNAME_NOT_VALID_MESSAGE\n  \t\t},\n      'firstName': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.NAME_NOT_VALID_MESSAGE\n  \t\t},\n      'lastName': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.NAME_NOT_VALID_MESSAGE\n  \t\t},\n  \t\t'emailAddress': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.EMAIL_NOT_VALID_MESSAGE\n  \t\t},\n  \t\t'userName': {\n    \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n      \t'pattern': Config.UNAME_NOT_VALID_MESSAGE\n  \t\t},\n      'phoneNumber': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.PHONE_NOT_VALID_MESSAGE\n  \t\t},\n      'startDate': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'endDate': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n  \t\t'address': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n  \t\t'country': {\n    \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'state': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'city': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n  \t\t'zipCode': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.ZIP_NOT_VALID_MESSAGE\n  \t\t},\n  \t\t'keyword': {\n    \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n      \t'pattern': Config.KEYWORD_NOT_VALID_MESSAGE\n  \t\t}\n\t};\n\n\tsubmit() { //console.log(this.clientRegisterForm);\n  \t\tthis.loading = true;\n     \tthis.showErrors = 1;\n    \tconst form = this.clientRegisterForm;\n    \tfor (const field in this.attributes) {\n      \t\tthis.attributes[field] = '';\n      \t\tconst control = form.get(field);\n      \t\tif (control && !control.valid) {\n        \t\tconst messages = this.validationMessages[field];\n        \t\tfor (const key in control.errors) {\n          \t\t\tif (this.attributes[field] == '') {\n              \t\t\tthis.attributes[field] += messages[key] + ' ';\n          \t\t\t}\n        \t\t}\n      \t\t}\n    \t}\n    \tif (this.clientRegisterForm.valid) {\n    \t\tthis.showErrors = 0;\n        \tthis.spinner.show();\n    \t\tthis.clientService.clientRegister(this.clientRegisterForm.get('clinicName').value,this.clientRegisterForm.get('firstName').value,this.clientRegisterForm.get('lastName').value,this.clientRegisterForm.get('emailAddress').value,this.clientRegisterForm.get('userName').value,this.clientRegisterForm.get('phoneNumber').value,this.clientRegisterForm.get('startDate').value,this.clientRegisterForm.get('endDate').value,this.clientRegisterForm.get('address').value,this.clientRegisterForm.get('country').value,this.clientRegisterForm.get('state').value,this.clientRegisterForm.get('city').value,this.clientRegisterForm.get('zipCode').value,this.clientRegisterForm.get('keyword').value).then((result) => {\n    \t\t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n          \t\tif(result['message'] && result['message'] != ''){\n          \t\t\tthis.toastr.success(result['message']);\t\n          \t\t}else{\n          \t\t\tthis.toastr.success(Config.RESET_PASSWORD_SUCCESS_MSG);\n          \t\t}\n          \t\tthis.clientRegisterForm.reset();\n          \t},error => {\n        \t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n        \t\t//this.clientRegisterForm.reset();\n\t\t\t\tthis.toastr.error(error);\n     \t\t}); \n    \t}else{\n        \tthis.loading = false;\n      \t}\n\t}\n\t\n\tonBlurEvent(event: any){\n\t\tconsole.log(event.target.value); \n\t}\n}\n","<div class=\"container-fluid\">\n  <!-- Page Heading -->\n  <div class=\"d-sm-flex align-items-center justify-content-between mb-4\">\n    <h1 class=\"h3 mb-0 text-gray-800\">New Clinic Registration</h1>\n  </div>\n\t<!--<tr *ngFor=\"let country of countries\">\n      <th>{{country.name}}</th>\n\t</tr>-->\n  <!-- Content Row -->\n  <div class=\"row\">\n\t<div class=\"col-xl-12 col-md-12 mb-4\">\n      <div class=\"card shadow h-100 py-2\">\n        <div class=\"card-body\">\n          <div class=\"row no-gutters align-items-center\">\n            <div class=\"col \">\n            \t<form class=\"\" [formGroup]=\"clientRegisterForm\" (ngSubmit)=\"submit()\" novalidate>\n                <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Clinic Name<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputClinicName\" aria-describedby=\"newPasswordHelp\" placeholder=\"Clinic Name...\" formControlName=\"clinicName\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.clinicName.valid }\">\n      \t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.clinicName.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.clinicName }}\n\t\t\t\t\t\t\t\t\t</div> \n                </div>\n                <div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">First Name<span class=\"mandatorySign\">*</span></label>\n                    <input type=\"text\" class=\"form-control\" id=\"inputFirstName\" aria-describedby=\"newPasswordHelp\" placeholder=\"First Name...\" formControlName=\"firstName\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.firstName.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.firstName.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.firstName }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n\t\t\t\t\t\t\t\t\t\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Last Name<span class=\"mandatorySign\">*</span></label>\n                    <input type=\"text\" class=\"form-control\" id=\"inputLastName\" aria-describedby=\"newPasswordHelp\" placeholder=\"Last Name...\" formControlName=\"lastName\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.lastName.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.lastName.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.lastName }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Email Address<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t<input type=\"email\" class=\"form-control\" id=\"inputEmailAddress\" aria-describedby=\"newPasswordHelp\" placeholder=\"Email Address...\" formControlName=\"emailAddress\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.emailAddress.valid }\">\n      \t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.emailAddress.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.emailAddress }}\n\t\t\t\t\t\t\t\t\t</div> \n                </div>\n                <div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Username<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputUserName\" aria-describedby=\"newPasswordHelp\" placeholder=\"Username...\" formControlName=\"userName\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.userName.valid }\">\n      \t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.userName.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.userName }}\n\t\t\t\t\t\t\t\t\t</div> \n                  </div>\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Phone Number<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputPhoneNumber\" aria-describedby=\"newPasswordHelp\" placeholder=\"Phone Number...(Eg:-000000000000)\" formControlName=\"phoneNumber\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.phoneNumber.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.phoneNumber.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.phoneNumber }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                <div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Start Date<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<input min=\"{{myDate}}\" type=\"date\" class=\"form-control\" id=\"inputStartDate\" aria-describedby=\"newPasswordHelp\" placeholder=\"Start Date...\" formControlName=\"startDate\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.startDate.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.startDate.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.startDate }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">End Date<span class=\"mandatorySign\">*</span></label>\n                    <input min=\"{{myDate}}\" type=\"date\" class=\"form-control\" id=\"inputEndDate\" aria-describedby=\"newPasswordHelp\" placeholder=\"End Date...\" formControlName=\"endDate\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.endDate.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.endDate.valid\" class=\"invalid-feedback\"> \n\t\t\t\t\t\t\t\t\t\t\t{{ attributes.endDate }}\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Address<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputAddress\" aria-describedby=\"newPasswordHelp\" placeholder=\"Address...\" formControlName=\"address\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.address.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.address.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.address }}\n\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                \t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Select Country<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<select formControlName=\"country\" class=\"form-control\" (change)=\"onChangeCountry($event.target.value)\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.country.valid }\">\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select country...</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let country of countries\" [value]=\"country.id\">{{country.name}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.country.valid\" class=\"invalid-feedback\"> \n\t\t\t\t\t\t\t\t\t\t\t{{ attributes.countryId }}\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n\t\t\t\t\t\t\t\t\t\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Select State<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<select formControlName=\"state\" class=\"form-control\" (change)=\"onChangeState($event.target.value)\"  [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.state.valid }\">\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select state...</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let state of states\" [value]=\"state.id\">{{state.name}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.state.valid\" class=\"invalid-feedback\"> \n\t\t\t\t\t\t\t\t\t\t\t{{ attributes.stateId }}\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                \n                <div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Select City<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<select formControlName=\"city\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.city.valid }\">\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select city...</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let city of cities\" [value]=\"city.id\">{{city.name}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.city.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.city }}\n\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Zip Code<span class=\"mandatorySign\">*</span></label>\n                    <input type=\"text\" class=\"form-control\" id=\"inputZipCode\" aria-describedby=\"newPasswordHelp\" placeholder=\"Zip Code...\" formControlName=\"zipCode\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.zipCode.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.zipCode.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.zipCode }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                \n                <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Keyword For Instance<span class=\"mandatorySign\">*</span></label>\n                  <input (blur)=\"onBlurEvent($event)\" type=\"text\" class=\"form-control\" id=\"inputKeyword\" aria-describedby=\"newPasswordHelp\" placeholder=\"Keyword For Instance...\" formControlName=\"keyword\" [ngClass]=\"{ 'is-invalid': showErrors && !clientRegisterForm.controls.keyword.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientRegisterForm.controls.keyword.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.keyword }}\n\t\t\t\t\t\t\t\t\t</div>\n                </div>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<!--<div class=\"form-group\">\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<mat-form-field>\n\t\t\t\t\t\t\t\t\t\t<input matInput [matDatepicker] = \"picker\" placeholder = \"Choose a date\">\n\t\t\t\t\t\t\t\t\t\t<mat-datepicker-toggle matSuffix [for] = \"picker\"></mat-datepicker-toggle>\n\t\t\t\t\t\t\t\t\t\t<mat-datepicker #picker></mat-datepicker>\n\t\t\t\t\t\t\t\t\t</mat-form-field>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</div>-->\n                \n                <button type=\"submit\" class=\"btn btn-primary btn-block\">\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n\t\t\t\t\t\t\t\t\t\tRegister Clinic\n\t\t\t\t\t\t\t\t</button>\n                <hr>\n              </form> \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Config } from '../../../constant';\n@Component({\n  selector: 'superadmin-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\tcurrentDate : Date = new Date();\n\tappTitle: string = Config.APP_TITLE;\n\tconstructor() { }\n  \tngOnInit(): void {\n  \t}\n}\n","<footer class=\"sticky-footer bg-white\">\n    <div class=\"container my-auto\">\n\t\t<div class=\"copyright text-center my-auto\">\n\t\t\t<span>Copyright &copy; {{currentDate | date: 'yyyy'}}, <a id=\"pixinventLink\" href=\"javascript:void(0)\">{{appTitle}}</a>, LLC. All Rights Reserved</span>\n\t\t</div>\n    </div>\n</footer>\n<a class=\"scroll-to-top rounded\" href=\"#page-top\">\n\t<i class=\"fas fa-angle-up\"></i>\n</a>","import { Component, OnInit } from '@angular/core';\nimport { Config } from '../../../constant';\ndeclare var jQuery: any;\n@Component({\n    selector: 'sidebar',\n    templateUrl: './sidebar.component.html',\n    styleUrls: ['./sidebar.component.css']\n})\nexport class SidebarComponent implements OnInit {\n    appTitle: string = Config.APP_TITLE;\n    appLogo: string = Config.SIDEBAR_LOGO_PATH;\n    constructor() { \n    }\n    ngOnInit() {\n    \t(function($) {\n  \t\t\t\"use strict\"; // Start of use strict\n\n  \t\t\t// Toggle the side navigation\n\t\t\t$(\"#sidebarToggle, #sidebarToggleTop\").on('click', function(e) {\n\t\t\t    $(\"body\").toggleClass(\"sidebar-toggled\");\n\t\t\t    $(\".sidebar\").toggleClass(\"toggled\");\n\t\t\t    if ($(\".sidebar\").hasClass(\"toggled\")) {\n\t\t\t      $('.sidebar .collapse').collapse('hide');\n\t\t\t    };\n  \t\t\t});\n\n  \t\t\t// Close any open menu accordions when window is resized below 768px\n  \t\t\t$(window).resize(function() {\n    \t\t\tif ($(window).width() < 768) {\n      \t\t\t\t$('.sidebar .collapse').collapse('hide');\n    \t\t\t};\n    \n    \t\t\t// Toggle the side navigation when window is resized below 480px\n    \t\t\tif ($(window).width() < 480 && !$(\".sidebar\").hasClass(\"toggled\")) {\n      \t\t\t\t$(\"body\").addClass(\"sidebar-toggled\");\n      \t\t\t\t$(\".sidebar\").addClass(\"toggled\");\n      \t\t\t\t$('.sidebar .collapse').collapse('hide');\n\t\t\t\t};\n  \t\t\t});\n\n  \t\t\t// Prevent the content wrapper from scrolling when the fixed side navigation hovered over\n  \t\t\t$('body.fixed-nav .sidebar').on('mousewheel DOMMouseScroll wheel', function(e) {\n    \t\t\tif ($(window).width() > 768) {\n      \t\t\t\tvar e0 = e.originalEvent,\n        \t\t\tdelta = e0.wheelDelta || -e0.detail;\n      \t\t\t\tthis.scrollTop += (delta < 0 ? 1 : -1) * 30;\n      \t\t\t\te.preventDefault();\n    \t\t\t}\n  \t\t\t});\n\n  \t\t\t// Scroll to top button appear\n  \t\t\t$(document).on('scroll', function() {\n    \t\t\tvar scrollDistance = $(this).scrollTop();\n    \t\t\tif (scrollDistance > 100) {\n      \t\t\t\t$('.scroll-to-top').fadeIn();\n    \t\t\t} else {\n      \t\t\t\t$('.scroll-to-top').fadeOut();\n    \t\t\t}\n  \t\t\t});\n\t\t\t// Smooth scrolling using jQuery easing\n  \t\t\t$(document).on('click', 'a.scroll-to-top', function(e) {\n    \t\t\tvar $anchor = $(this);\n    \t\t\t$('html, body').stop().animate({\n      \t\t\tscrollTop: ($($anchor.attr('href')).offset().top)\n    \t\t\t}, 1000, 'easeInOutExpo');\n    \t\t\te.preventDefault();\n  \t\t\t});\n\t\t})(jQuery); // End of use strict\n\t}\n}\n","<ul class=\"navbar-nav bg-gradient-primary sidebar sidebar-dark accordion\" id=\"accordionSidebar\">\n\n      <!-- Sidebar - Brand -->\n      <a class=\"sidebar-brand d-flex align-items-center justify-content-center\" routerLink=\"/superadmin\">\n        <div class=\"sidebar-brand-icon\">\n          <img [src]=\"appLogo\" alt=\"app-logo\" class=\"sidebar-logo\">\n          <!-- <i class=\"fas fa-laugh-wink\"></i> -->\n        </div>\n        <div class=\"sidebar-brand-text mx-3\">{{appTitle}}</div>\n      </a>\n\n      <!-- Divider -->\n      <hr class=\"sidebar-divider my-0\">\n\n      <!-- Nav Item - Dashboard -->\n     <!-- <li class=\"nav-item active\">\n        <a class=\"nav-link\" routerLink=\"/superadmin\">\n          <i class=\"fas fa-fw fa-tachometer-alt\"></i>\n          <span>Dashboard</span></a>\n      </li>-->\n\n      <!-- Divider -->\n      <hr class=\"sidebar-divider\">\n      \n       <li class=\"nav-item active\">\n        <a class=\"nav-link\" routerLink=\"/superadmin/client\">\n          <i class=\"fas fa-fw fa-user-alt\"></i>\n          <span>Clinics</span></a>\n      </li>\n       \n       <li class=\"nav-item active\">\n        <a class=\"nav-link\" routerLink=\"/superadmin/messages\">\n          <i class=\"fas fa-fw fa-envelope\"></i>\n          <span>Messages</span></a>\n      </li>\n\n      <!-- Heading -->\n      <!--<div class=\"sidebar-heading\">\n        Interface\n      </div>-->\n\n      <!-- Nav Item - Pages Collapse Menu -->\n      <!--<li class=\"nav-item\">\n        <a class=\"nav-link collapsed\" href=\"#\" data-toggle=\"collapse\" data-target=\"#collapseTwo\" aria-expanded=\"true\" aria-controls=\"collapseTwo\">\n          <i class=\"fas fa-fw fa-cog\"></i>\n          <span>Components</span>\n        </a>\n        <div id=\"collapseTwo\" class=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordionSidebar\">\n          <div class=\"bg-white py-2 collapse-inner rounded\">\n            <h6 class=\"collapse-header\">Custom Components:</h6>\n            <a class=\"collapse-item\" href=\"buttons.html\">Buttons</a>\n            <a class=\"collapse-item\" href=\"cards.html\">Cards</a>\n          </div>\n        </div>\n      </li>-->\n\n      <!-- Nav Item - Utilities Collapse Menu -->\n      <!--<li class=\"nav-item\">\n        <a class=\"nav-link collapsed\" href=\"#\" data-toggle=\"collapse\" data-target=\"#collapseUtilities\" aria-expanded=\"true\" aria-controls=\"collapseUtilities\">\n          <i class=\"fas fa-fw fa-wrench\"></i>\n          <span>Utilities</span>\n        </a>\n        <div id=\"collapseUtilities\" class=\"collapse\" aria-labelledby=\"headingUtilities\" data-parent=\"#accordionSidebar\">\n          <div class=\"bg-white py-2 collapse-inner rounded\">\n            <h6 class=\"collapse-header\">Custom Utilities:</h6>\n            <a class=\"collapse-item\" href=\"utilities-color.html\">Colors</a>\n            <a class=\"collapse-item\" href=\"utilities-border.html\">Borders</a>\n            <a class=\"collapse-item\" href=\"utilities-animation.html\">Animations</a>\n            <a class=\"collapse-item\" href=\"utilities-other.html\">Other</a>\n          </div>\n        </div>\n      </li>-->\n\n      <!-- Divider -->\n      <hr class=\"sidebar-divider\">\n\n      <!-- Heading -->\n      <!--<div class=\"sidebar-heading\">\n        Addons\n      </div>-->\n\n      <!-- Nav Item - Pages Collapse Menu -->\n      <!--<li class=\"nav-item\">\n        <a class=\"nav-link collapsed\" href=\"#\" data-toggle=\"collapse\" data-target=\"#collapsePages\" aria-expanded=\"true\" aria-controls=\"collapsePages\">\n          <i class=\"fas fa-fw fa-folder\"></i>\n          <span>Pages</span>\n        </a>\n        <div id=\"collapsePages\" class=\"collapse\" aria-labelledby=\"headingPages\" data-parent=\"#accordionSidebar\">\n          <div class=\"bg-white py-2 collapse-inner rounded\">\n            <h6 class=\"collapse-header\">Login Screens:</h6>\n            <a class=\"collapse-item\" href=\"login.html\">Login</a>\n            <a class=\"collapse-item\" href=\"register.html\">Register</a>\n            <a class=\"collapse-item\" href=\"forgot-password.html\">Forgot Password</a>\n            <div class=\"collapse-divider\"></div>\n            <h6 class=\"collapse-header\">Other Pages:</h6>\n            <a class=\"collapse-item\" href=\"404.html\">404 Page</a>\n            <a class=\"collapse-item\" href=\"blank.html\">Blank Page</a>\n          </div>\n        </div>\n      </li>-->\n\n      <!-- Nav Item - Charts -->\n      <!--<li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"charts.html\">\n          <i class=\"fas fa-fw fa-chart-area\"></i>\n          <span>Charts</span></a>\n      </li>-->\n\n      <!-- Nav Item - Tables -->\n      <!--<li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"tables.html\">\n          <i class=\"fas fa-fw fa-table\"></i>\n          <span>Tables</span></a>\n      </li>-->\n\n      <!-- Divider -->\n      <!--<hr class=\"sidebar-divider d-none d-md-block\">-->\n\n      <!-- Sidebar Toggler (Sidebar) -->\n      <!--<div class=\"text-center d-none d-md-inline\">\n        <button class=\"rounded-circle border-0\" id=\"sidebarToggle\"></button>\n      </div>-->\n\n    </ul>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService, ClientService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-client-update',\n  templateUrl: './client-update.component.html',\n  styleUrls: ['./client-update.component.less']\n})\nexport class ClientUpdateComponent implements OnInit {\nclientUpdateForm: FormGroup;\n  loading: boolean = false;\n  showErrors: number = 0;\n  resData: any;\n  countries: {};\n  states: {};\n  cities: {};\n  client: any;\n\n\n\tconstructor(private formBuilder: FormBuilder,\n    private adminAuthService: AdminAuthService,\n    private clientService: ClientService,      \n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService,\n    private router : Router,\n    private route : ActivatedRoute,\n    private commonService : CommonService) { \n      this.commonService.setPageTitle(this.route.snapshot.data['title']);\n      this.commonService.checkSuperAdminLogin();\n    }\n\n\tngOnInit() {\n    this.getCountry();\n    const clientId = this.route.snapshot.paramMap.get('id');\n    //getProfileById(clientId: number) {\n      if (clientId) {\n        this.clientService.getProfileById(+clientId).then((result) => {\n          \n          this.resData = result;\n          this.client = this.resData.data;\n\t\t\t\t\t\n\t\t\t\t\tvar countryID = this.client.country_id;\n\t\t\t\t\tvar stateID = this.client.state_id;\n          //console.warn(countryID);\n          this.clientUpdateForm.patchValue({\n            clinicName: this.client.clinic_name,\n            firstName: this.client.first_name,\n            lastName: this.client.last_name,\n            emailAddress: this.client.email,\n            userName: this.client.username,\n            phoneNumber: this.client.phone_number,\n            startDate: this.formatDate(this.client.start_date),\n            endDate: this.formatDate(this.client.end_date),\n            address: this.client.address,\n            country: this.client.country_id,\n            state: this.client.state_id,\n            city: this.client.city_id,\n            zipCode: this.client.zip_code,\n            keyword: this.client.keyword,\n            status: this.client.status,\n            clientId: clientId\n          });\n\t\t\t\t\tthis.getStatesByCountryId(countryID);\n\t\t\t\t\tthis.getCitiesByStateId(stateID);\n        },error => {\n          this.spinner.hide();\n          this.loading = false;\n          this.toastr.error(error);\n        });\n\t\t\t\t\n\t\t\t\t\n      } else {\n        this.client = null;\n      }\n\t\t\t\t\t\t\n    //}\n\t\t\n\t\t\n    \n    //console.warn(clientId);\n    \n    this.clientUpdateForm = new FormGroup({\n      country: new FormControl(''),\n      state: new FormControl(''),\n      city: new FormControl('')\n    });\n    \n\t\tthis.clientUpdateForm = this.formBuilder.group({\n      clinicName: ['', [Validators.required , Validators.pattern(Config.CLNAME_PATTERN)]],\n      firstName: ['', [Validators.required , Validators.pattern(Config.NAME_PATTERN)]],\n      lastName: ['', [Validators.required , Validators.pattern(Config.NAME_PATTERN)]],\n      emailAddress: ['', [Validators.required , Validators.pattern(Config.EMAIL_PATTERN)]],\n      userName:  ['', [Validators.required , Validators.pattern(Config.UNAME_PATTERN)]],\n      phoneNumber: ['', [Validators.required , Validators.pattern(Config.PHONE_PATTERN)]],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n      address: ['', Validators.required ],\n      country: ['', Validators.required],\n      state: ['', Validators.required],\n      city: ['', Validators.required],\n      zipCode: ['', [Validators.required , Validators.pattern(Config.ZIP_PATTERN)]],\n      keyword: ['', [Validators.required , Validators.pattern(Config.KEYWORD_PATTERN)]],\n      clientId: ['', Validators.required ]\n    });\n\n  }\n  \n  //getProfileById(clientId: number) {\n  //  if (clientId) {\n  //    this.clientService.getProfileById(clientId).then((result) => {\n  //      this.resData = result;\n  //      this.states = this.resData.data;\n  //      this.cities = null;\n  //    },error => {\n  //      this.spinner.hide();\n  //      this.loading = false;\n  //      this.toastr.error(error);\n  //    });      \n  //  } else {\n  //    this.states = null;\n  //    this.cities = null;\n  //  }\n  //}\n  \n  getCountry() {\n    this.clientService.getCountries().then((result) => {\n        this.resData = result;\n        this.countries = this.resData.data;\n        },error => {\n        this.spinner.hide();\n        this.loading = false;\n        this.toastr.error(error);\n    });\n  }\n  \n  onChangeCountry(countryId: number) {\n    if (countryId) {\n      this.clientService.getStatesById(countryId).then((result) => {\n        this.resData = result;\n        this.states = this.resData.data.stateList;\n        this.cities = null;\n      },error => {\n        this.spinner.hide();\n        this.loading = false;\n        this.toastr.error(error);\n      });      \n    } else {\n      this.states = null;\n      this.cities = null;\n    }\n  }\n\n  onChangeState(stateId: number) {\n    if (stateId) {\n      this.clientService.getCitiesById(stateId).then((result) => {\n        this.resData = result;\n        this.cities = this.resData.data.cityList;\n      },error => {\n        this.spinner.hide();\n        this.loading = false;\n        this.toastr.error(error);\n      });      \n    } else {\n      this.cities = null;\n    }\n  }\n\t\n\tgetStatesByCountryId(countryId: number) {\n\t\tif (countryId) {\n\t\t\tthis.clientService.getStatesById(countryId).then((result) => {\n\t\t\t\tthis.resData = result;\n\t\t\t\tthis.states = this.resData.data.stateList;\n\t\t\t\tthis.cities = null;\n\t\t\t},error => {\n\t\t\t\tthis.spinner.hide();\n\t\t\t\tthis.loading = false;\n\t\t\t\tthis.toastr.error(error);\n\t\t\t});      \n\t\t} else {\n\t\t\tthis.states = null;\n\t\t\tthis.cities = null;\n\t\t}\n\t}\n\n\tgetCitiesByStateId(stateId: number) {\n\t\tif (stateId) {\n\t\t\tthis.clientService.getCitiesById(stateId).then((result) => {\n\t\t\t\tthis.resData = result;\n\t\t\t\tthis.cities = this.resData.data.cityList;\n\t\t\t},error => {\n\t\t\t\tthis.spinner.hide();\n\t\t\t\tthis.loading = false;\n\t\t\t\tthis.toastr.error(error);\n\t\t\t});      \n\t\t} else {\n\t\t\tthis.cities = null;\n\t\t}\n\t}\n\t\n\tprivate formatDate(date) {\n    const d = new Date(date);\n    let month = '' + (d.getMonth() + 1);\n    let day = '' + d.getDate();\n    const year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  }\n  \n  attributes = {'clinicName': '','firstName': '','lastName': '','emailAddress': '','userName': '','phoneNumber': '','startDate': '','endDate': '','address': '','country': '','state': '','city': '','zipCode': '','keyword': '', 'clientId': ''};\n\tvalidationMessages = {\n      'clinicName': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.CLNAME_NOT_VALID_MESSAGE\n  \t\t},\n      'firstName': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.NAME_NOT_VALID_MESSAGE\n  \t\t},\n      'lastName': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.NAME_NOT_VALID_MESSAGE\n  \t\t},\n  \t\t'emailAddress': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.EMAIL_NOT_VALID_MESSAGE\n  \t\t},\n  \t\t'userName': {\n    \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n      \t'pattern': Config.UNAME_NOT_VALID_MESSAGE\n  \t\t},\n      'phoneNumber': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.PHONE_NOT_VALID_MESSAGE\n  \t\t},\n      'startDate': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'endDate': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n  \t\t'address': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n  \t\t'country': {\n    \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'state': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n      'city': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t},\n  \t\t'zipCode': {\n      \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n          'pattern': Config.ZIP_NOT_VALID_MESSAGE\n  \t\t},\n  \t\t'keyword': {\n    \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG,        \n      \t'pattern': Config.KEYWORD_NOT_VALID_MESSAGE\n  \t\t},\n  \t\t'clientId': {\n    \t\t'required': Config.PLEASE_FILL_REQUIRED_FIELD_MSG\n  \t\t}\n\t};\n\n\tsubmit() {\n  \t\tthis.loading = true;\n     \tthis.showErrors = 1;\n    \tconst form = this.clientUpdateForm;\n    \tfor (const field in this.attributes) {\n      \t\tthis.attributes[field] = '';\n      \t\tconst control = form.get(field);\n      \t\tif (control && !control.valid) {\n        \t\tconst messages = this.validationMessages[field];\n        \t\tfor (const key in control.errors) {\n          \t\t\tif (this.attributes[field] == '') {\n              \t\t\tthis.attributes[field] += messages[key] + ' ';\n          \t\t\t}\n        \t\t}\n      \t\t}\n    \t}\n    \tif (this.clientUpdateForm.valid) {\n    \t\tthis.showErrors = 0;\n        \tthis.spinner.show();\n    \t\tthis.clientService.clientUpdate(this.clientUpdateForm.get('clinicName').value,this.clientUpdateForm.get('firstName').value,this.clientUpdateForm.get('lastName').value,this.clientUpdateForm.get('emailAddress').value,this.clientUpdateForm.get('userName').value,this.clientUpdateForm.get('phoneNumber').value,this.clientUpdateForm.get('startDate').value,this.clientUpdateForm.get('endDate').value,this.clientUpdateForm.get('address').value,this.clientUpdateForm.get('country').value,this.clientUpdateForm.get('state').value,this.clientUpdateForm.get('city').value,this.clientUpdateForm.get('zipCode').value,this.clientUpdateForm.get('keyword').value,this.clientUpdateForm.get('clientId').value).then((result) => {\n    \t\t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n          \t\tif(result['message'] && result['message'] != ''){\n          \t\t\tthis.toastr.success(result['message']);\t\n          \t\t}else{\n          \t\t\tthis.toastr.success(Config.RESET_PASSWORD_SUCCESS_MSG);\n          \t\t}\n          \t\t//this.clientRegisterForm.reset();\n          \t},error => {\n        \t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n        \t\t//this.clientRegisterForm.reset();\n\t\t\t\tthis.toastr.error(error);\n     \t\t}); \n    \t}else{\n        \tthis.loading = false;\n      \t}\n\t}\n}\n","<div class=\"container-fluid\">\n  <!-- Page Heading -->\n  <div class=\"d-sm-flex align-items-center justify-content-between mb-4\">\n    <h1 class=\"h3 mb-0 text-gray-800\">Update Clinic Details</h1>\n  </div>\n\t<!--<tr *ngFor=\"let country of countries\">\n      <th>{{country.name}}</th>\n\t</tr>-->\n  <!-- Content Row -->\n  <div class=\"row\">\n\t<div class=\"col-xl-12 col-md-12 mb-4\">\n      <div class=\"card shadow h-100 py-2\">\n        <div class=\"card-body\">\n          <div class=\"row no-gutters align-items-center\">\n            <div class=\"col \">\n            \t<form class=\"\" [formGroup]=\"clientUpdateForm\" (ngSubmit)=\"submit()\" novalidate>\n                <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Clinic Name<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputClinicName\" aria-describedby=\"newPasswordHelp\" placeholder=\"Clinic Name...\" formControlName=\"clinicName\" readonly [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.clinicName.valid }\">\n      \t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.clinicName.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.clinicName }}\n\t\t\t\t\t\t\t\t\t</div> \n                </div>\n                <div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">First Name<span class=\"mandatorySign\">*</span></label>\n                    <input type=\"text\" class=\"form-control\" id=\"inputFirstName\" aria-describedby=\"newPasswordHelp\" placeholder=\"First Name...\" formControlName=\"firstName\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.firstName.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.firstName.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.firstName }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n\t\t\t\t\t\t\t\t\t\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Last Name<span class=\"mandatorySign\">*</span></label>\n                    <input type=\"text\" class=\"form-control\" id=\"inputLastName\" aria-describedby=\"newPasswordHelp\" placeholder=\"Last Name...\" formControlName=\"lastName\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.lastName.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.lastName.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.lastName }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Email Address<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t<input type=\"email\" class=\"form-control\" id=\"inputEmailAddress\" aria-describedby=\"newPasswordHelp\" placeholder=\"Email Address...\" formControlName=\"emailAddress\" readonly [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.emailAddress.valid }\">\n      \t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.emailAddress.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.emailAddress }}\n\t\t\t\t\t\t\t\t\t</div> \n                </div>\n                <div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Username<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputUserName\" aria-describedby=\"newPasswordHelp\" placeholder=\"Username...\" formControlName=\"userName\" readonly [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.userName.valid }\">\n      \t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.userName.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.userName }}\n\t\t\t\t\t\t\t\t\t</div> \n                  </div>\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Phone Number<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputPhoneNumber\" aria-describedby=\"newPasswordHelp\" placeholder=\"Phone Number...(Eg:-0000000000)\" formControlName=\"phoneNumber\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.phoneNumber.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.phoneNumber.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.phoneNumber }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                <div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Start Date<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"date\" class=\"form-control\" id=\"inputStartDate\" aria-describedby=\"newPasswordHelp\" placeholder=\"Start Date...\" formControlName=\"startDate\" readonly [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.startDate.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.startDate.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.startDate }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">End Date<span class=\"mandatorySign\">*</span></label>\n                    <input type=\"date\" class=\"form-control\" id=\"inputEndDate\" aria-describedby=\"newPasswordHelp\" placeholder=\"End Date...\" formControlName=\"endDate\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.endDate.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.endDate.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.endDate }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Address<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputAddress\" aria-describedby=\"newPasswordHelp\" placeholder=\"Address...\" formControlName=\"address\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.address.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.address.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.address }}\n\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                \n                <!--<div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n                    <input type=\"text\" class=\"form-control\" id=\"inputCountryId\" aria-describedby=\"newPasswordHelp\" placeholder=\"Select Country...\" formControlName=\"countryId\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.countryId.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.countryId.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.countryId }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                  <div class=\"col-sm-6\">\n                    <input type=\"text\" class=\"form-control\" id=\"inputCountryId\" aria-describedby=\"newPasswordHelp\" placeholder=\"Select State...\" formControlName=\"stateId\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.stateId.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.stateId.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.stateId }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>-->\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Select Country<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<select formControlName=\"country\" readonly class=\"form-control\" (change)=\"onChangeCountry($event.target.value)\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.country.valid }\">\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select country...</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let country of countries\" [value]=\"country.id\">{{country.name}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.country.valid\" class=\"invalid-feedback\"> \n\t\t\t\t\t\t\t\t\t\t\t{{ attributes.countryId }}\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Select State<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<select formControlName=\"state\" readonly class=\"form-control\" (change)=\"onChangeState($event.target.value)\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.state.valid }\">\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select state...</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let state of states\" [value]=\"state.id\">{{state.name}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.state.valid\" class=\"invalid-feedback\"> \n\t\t\t\t\t\t\t\t\t\t\t{{ attributes.stateId }}\n\t\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                \n                <div class=\"form-group row\">\n                  <div class=\"col-sm-6 mb-3 mb-sm-0\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Select City<span class=\"mandatorySign\">*</span></label>\n\t\t\t\t\t\t\t\t\t\t<select formControlName=\"city\" readonly class=\"form-control\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.city.valid }\">\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">Select city...</option>\n\t\t\t\t\t\t\t\t\t\t\t<option *ngFor=\"let city of cities\" [value]=\"city.id\">{{city.name}}</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n                    <!--<input type=\"text\" class=\"form-control\" id=\"inputCityId\" aria-describedby=\"newPasswordHelp\" placeholder=\"Select City...\" formControlName=\"cityId\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.cityId.valid }\">-->\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.city.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.city }}\n\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                  <div class=\"col-sm-6\">\n\t\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Zip Code<span class=\"mandatorySign\">*</span></label>\n                    <input type=\"text\" class=\"form-control\" id=\"inputZipCode\" aria-describedby=\"newPasswordHelp\" placeholder=\"Zip Code...\" formControlName=\"zipCode\" [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.zipCode.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.zipCode.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.zipCode }}\n\t\t\t\t\t\t\t\t\t</div>\n                  </div>\n                </div>\n                \n                <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"titleBold\">Keyword For Instance<span class=\"mandatorySign\">*</span></label>\n                  <input type=\"text\" class=\"form-control\" id=\"inputKeyword\" aria-describedby=\"newPasswordHelp\" placeholder=\"Keyword For Instance...\" formControlName=\"keyword\" readonly [ngClass]=\"{ 'is-invalid': showErrors && !clientUpdateForm.controls.keyword.valid }\">\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !clientUpdateForm.controls.keyword.valid\" class=\"invalid-feedback\"> \n   \t\t\t\t\t\t\t\t{{ attributes.keyword }}\n\t\t\t\t\t\t\t\t\t</div>\n                </div>\n                <input type=\"hidden\" class=\"form-control\" id=\"inputId\" formControlName=\"clientId\">\n                <button type=\"submit\" class=\"btn btn-primary btn-block\">\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n\t\t\t\t\t\t\t\t\t\tUpdate Clinic\n\t\t\t\t\t\t\t\t</button>\n                <hr>\n                <!--<a href=\"index.html\" class=\"btn btn-google btn-user btn-block\">\n                  <i class=\"fab fa-google fa-fw\"></i> Register with Google\n                </a>\n                <a href=\"index.html\" class=\"btn btn-facebook btn-user btn-block\">\n                  <i class=\"fab fa-facebook-f fa-fw\"></i> Register with Facebook\n                </a>-->\n              </form> \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService, ClientService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-client-archived',\n  templateUrl: './client-archived.component.html',\n  styleUrls: ['./client-archived.component.less']\n})\nexport class ClientArchivedComponent implements OnInit {\n  loading: boolean = false;\n  showErrors: number = 0;\n  clients: any;\n  resData: any;\n\n  constructor(private formBuilder: FormBuilder,\n    \tprivate adminAuthService: AdminAuthService,\n      private clientService: ClientService,\n    \tprivate toastr: ToastrService,\n    \tprivate spinner: NgxSpinnerService,\n    \tprivate router : Router,\n    \tprivate route : ActivatedRoute,\n    \tprivate commonService : CommonService) { \n    this.commonService.setPageTitle(this.route.snapshot.data['title']);\n    this.commonService.checkSuperAdminLogin();\n\t}\n\n   ngOnInit() {\n    this.getarchivedUsers();\n  }\n\n  getarchivedUsers() {\n    this.clientService.getarchivedClients().then((result) => {\n        this.resData = result;\n        this.clients = this.resData.data;\n        },error => {\n        this.spinner.hide();\n        this.loading = false;\n        //this.changePasswordForm.reset();\n        this.toastr.error(error);\n    });\n  }\n\n}\n","<!-- Begin Page Content -->\n        <div class=\"container-fluid\">\n\n          <!-- Page Heading -->\n          <h1 class=\"h3 mb-2 text-gray-800\">Archived Clinics</h1>\n          <!--<p class=\"mb-4\">DataTables is a third party plugin that is used to generate the demo table below. For more information about DataTables, please visit the <a target=\"_blank\" href=\"https://datatables.net\">official DataTables documentation</a>.</p>-->\n\n          <!-- DataTales Example -->\n          <div class=\"card shadow mb-4\">\n            <!--<div class=\"card-header py-3\">\n              <p style=\"float: left;\">\n              <a routerLink=\"/superadmin/client-archived\" class=\"btn btn-warning btn-icon-split\">\n                <span class=\"icon text-white-50\">\n                  <i class=\"fas fa-user\"></i>\n                </span>\n                <span class=\"text\">Archived Clinic</span>\n              </a>\n              </p>\n              <p style=\"float: right;\">\n              <a routerLink=\"/superadmin/client-register\" class=\"btn btn-success btn-icon-split\">\n                <span class=\"icon text-white-50\">\n                  <i class=\"fas fa-plus\"></i>\n                </span>\n                <span class=\"text\">Add New Clinic</span>\n              </a>\n              </p>\n            </div>-->\n            <div class=\"card-body\">\n              <div class=\"table-responsive\">\n                <table class=\"table table-bordered\" id=\"dataTable\" width=\"100%\" cellspacing=\"0\">\n                  <thead>\n                    <tr>\n                      <th>Clinic Name</th>\n                      <th>Name</th>\n                      <th>Email</th>\n                      <th>Keyword</th>\n                      <th>Phone</th>\n                      <th>End Date</th>\n                      <!--<th>Action</th>-->\n                    </tr>\n                  </thead>\n                  <!--<tfoot>\n                    <tr>\n                      <th>Name</th>\n                      <th>Position</th>\n                      <th>Office</th>\n                      <th>Age</th>\n                      <th>Start date</th>\n                      <th>Salary</th>\n                    </tr>\n                  </tfoot>-->\n                  <tbody>\n                   \n                    <tr *ngFor=\"let client of clients\">\n                      <th>{{client.clinic_name}}</th>\n                      <td>{{client.first_name}} {{client.last_name}}</td>\n                      <td>{{client.email}}</td>\n                      <td>{{client.keyword}}</td>\n                      <td>{{client.phone_number}}</td>\n                      <td>{{client.end_date | date:'yyyy-MM-dd'}}</td>\n                      <!--<td>\n                        <a routerLink=\"/superadmin/client-update/{{client.id}}\" class=\"btn btn-info btn-circle btn-sm\">\n                          <i class=\"fas fa-edit\"></i>\n                        </a>&nbsp;\n                        \n                          <a (click)=\"onUpdateStatus(client.id)\" class=\"btn btn-warning btn-circle btn-sm\">\n                            <i class=\"fas fa-toggle-on\"></i>\n                          </a>&nbsp;\n                       \n                        <a (click)=\"onDelete(client.id)\" class=\"btn btn-danger btn-circle btn-sm\">\n                          <i class=\"fas fa-trash\"></i>\n                        </a>\n                      </td>-->\n                    </tr>\n                   \n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n\n        </div>\n        <!-- /.container-fluid -->","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { PerfectScrollbarConfigInterface } from 'ngx-perfect-scrollbar'; \nimport { Observable } from \"rxjs/Observable\";\nimport { AdminAuthService, CommonService } from '../../_services';\n@Component({\n    selector: 'layout',\n    templateUrl: './layout.component.html',\n    styleUrls: ['./layout.component.css']\n})\nexport class LayoutComponent implements OnInit {\n    isSuperAdminLoggedIn$: Observable<boolean>;\n\tpublic config: PerfectScrollbarConfigInterface = {};\n    constructor(public router: Router,\n        private adminAuthService: AdminAuthService,\n        private commonService: CommonService) { \n        this.commonService.checkSuperAdminLogin();\n    }\n\n    ngOnInit() {\n        this.isSuperAdminLoggedIn$ = this.adminAuthService.isSuperAdminLoggedIn;\n    }\n\n}\n","<div id=\"wrapper\">\n\t<sidebar *ngIf=\"isSuperAdminLoggedIn$ | async\"></sidebar>\n\t<div id=\"content-wrapper\" class=\"d-flex flex-column\">\n\t\t<div id=\"content\">\n\t\t\t<superadmin-header *ngIf=\"isSuperAdminLoggedIn$ | async\"></superadmin-header>\n\t\t\t<router-outlet></router-outlet>\n\t\t</div>\n\t\t<superadmin-footer *ngIf=\"isSuperAdminLoggedIn$ | async\"></superadmin-footer>\n\t</div>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService, ClientService } from '../../_services';\n//import { ClientService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.less']\n})\nexport class MessageComponent implements OnInit {\n  loading: boolean = false;\n  showErrors: number = 0;\n  messages: any;\n  resData: any;\n  dtOptions: DataTables.Settings = {};\n  dtTrigger: Subject<any> = new Subject<any>();\n\n  constructor(private formBuilder: FormBuilder,\n    \tprivate adminAuthService: AdminAuthService,\n      private clientService: ClientService,\n    \tprivate toastr: ToastrService,\n    \tprivate spinner: NgxSpinnerService,\n    \tprivate router : Router,\n    \tprivate route : ActivatedRoute,\n    \tprivate commonService : CommonService) { \n    this.commonService.setPageTitle(this.route.snapshot.data['title']);\n    this.commonService.checkSuperAdminLogin();\n\t}\n\n  ngOnInit() {\n    this.dtOptions = {\n      pagingType: 'full_numbers',\n      pageLength: 10\n    };\n    \n    this.getMessages();\n  }\n  \n  ngOnDestroy(): void {\n    // Do not forget to unsubscribe the event\n    this.dtTrigger.unsubscribe();\n  }\n\n  getMessages() {\n    this.clientService.getMessages().then((result) => {\n        this.resData = result;\n        this.messages = this.resData.data;\n        this.dtTrigger.next();\n        },error => {\n        this.spinner.hide();\n        this.loading = false;\n        //this.changePasswordForm.reset();\n        this.toastr.error(error);\n    });\n  }\n\n}\n","<!-- Begin Page Content -->\n        <div class=\"container-fluid\">\n\n          <!-- Page Heading -->\n          <h1 class=\"h3 mb-2 text-gray-800\">Messages</h1>\n          <!--<p class=\"mb-4\">DataTables is a third party plugin that is used to generate the demo table below. For more information about DataTables, please visit the <a target=\"_blank\" href=\"https://datatables.net\">official DataTables documentation</a>.</p>-->\n\n          <!-- DataTales Example -->\n          <div class=\"card shadow mb-4\">\n            <div class=\"card-header py-3\">\n              <!--<p style=\"float: left;\">\n              <a routerLink=\"/superadmin/client-archived\" class=\"btn btn-warning btn-icon-split\">\n                <span class=\"icon text-white-50\">\n                  <i class=\"fas fa-user\"></i>\n                </span>\n                <span class=\"text\">Archived Clinic</span>\n              </a>\n              </p>-->\n              <!--<p style=\"float: right;\">\n              <a routerLink=\"/clinic/role-register\" class=\"btn btn-success btn-icon-split\">\n                <span class=\"icon text-white-50\">\n                  <i class=\"fas fa-plus\"></i>\n                </span>\n                <span class=\"text\">Add New Role</span>\n              </a>\n              </p>-->\n            </div>\n            <div class=\"card-body\">\n              <div class=\"table-responsive\">\n                <table class=\"table table-bordered\" width=\"100%\" cellspacing=\"0\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\">\n                  <thead>\n                    <tr>\n                      <th>Subject</th>\n                      <th>Message</th>\n                      <th>Sender Name</th>\n                      <th>Receiver Name</th>\n                      <th>Date</th>\n                    </tr>\n                  </thead>\n                  <!--<tfoot>\n                    <tr>\n                      <th>Name</th>\n                      <th>Position</th>\n                      <th>Office</th>\n                      <th>Age</th>\n                      <th>Start date</th>\n                      <th>Salary</th>\n                    </tr>\n                  </tfoot>-->\n                  <tbody>\n                    \n                    <!--<tr>\n                      <td>Administrator</td>\n                      <td>We manage the admin works.</td>\n                      <td><a class=\"btn btn-info btn-circle btn-sm\">\n                          <i class=\"fas fa-edit\"></i>\n                        </a>&nbsp;\n                        \n                          <a class=\"btn btn-warning btn-circle btn-sm\">\n                            <i class=\"fas fa-toggle-on\"></i>\n                          </a>&nbsp;\n                       \n                        <a class=\"btn btn-danger btn-circle btn-sm\">\n                          <i class=\"fas fa-trash\"></i>\n                        </a>\n                      </td>\n                    </tr>-->\n                   \n                    <tr *ngFor=\"let message of messages\">\n                      <td>{{message.subject}}</td>\n                      <td>{{message.message}}</td>\n                      <th>{{message.Sendername}}</th>\n                      <th>{{message.Receivername}}</th>\n                      <td>{{message.created_date | date:'yyyy-MM-dd'}}</td>           \n                      <!--<td>\n                        <a routerLink=\"/clinic/role-update/{{role.id}}\" class=\"btn btn-info btn-circle btn-sm\" title=\"Update Role\">                        \n                          <i class=\"fas fa-edit\"></i>\n                        </a>&nbsp;\n                        \n                          <a (click)=\"onUpdateStatus(role.id)\" class=\"btn btn-info btn-circle btn-sm\" title=\"Update Status\">\n                            <i class=\"fas fa-toggle-on\"></i>\n                          </a>&nbsp;\n                       \n                      </td>-->\n                    </tr>\n                   \n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n\n        </div>\n        <!-- /.container-fluid -->","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./auth.component.css']\n})\n\nexport class ResetPasswordComponent implements OnInit {\n\tresetPasswordForm: FormGroup;\n    loading: boolean = false;\n    showErrors: number = 0;\n    resetToken: string;\n\tconstructor(private formBuilder: FormBuilder,\n    \tprivate adminAuthService: AdminAuthService,\n    \tprivate toastr: ToastrService,\n    \tprivate spinner: NgxSpinnerService,\n    \tprivate router : Router,\n    \tprivate route : ActivatedRoute,\n      \tprivate commonService : CommonService) {\n\t\tthis.resetToken = this.route.snapshot.queryParams.resetToken;\n    this.commonService.setPageTitle(this.route.snapshot.data['title']);\n\t\tthis.commonService.checkSuperAdminLogin();\n\t}\n\tngOnInit() {\n\t\tthis.resetPasswordForm = this.formBuilder.group({\n        \tpassword: ['', [Validators.required , Validators.pattern(Config.PASSWORD_REGX)]],\n        \tconfirmPassword: ['', Validators.required]\n        },{validator: this.passwordMatchValidator});\n\t}\n\tpasswordMatchValidator(frm: FormGroup) {\n      return frm.controls['password'].value === frm.controls['confirmPassword'].value ? null : {'mismatch': true};\n    }\n    \n    attributes = {'password': '','confirmPassword': ''};\n\tvalidationMessages = {\n  \t\t'password': {\n      \t\t'required': Config.PASSWORD_REQUIRED_VALIDATION_MSG,\n      \t\t'pattern': Config.PASSWORD_NOT_VALID_VALIDATION_MSG\n  \t\t},\n  \t\t'confirmPassword': {\n    \t\t'required': Config.CONFIRM_PASSWORD_REQUIRED_VALIDATION_MSG,\n    \t\t'mismatch' : Config.PASSWORD_MISMATCH_VALIDATION_MSG\n  \t\t}\n\t};\n\tsubmit() {\n  \t\tthis.loading = true;\n     \tthis.showErrors = 1;\n    \tconst form = this.resetPasswordForm;\n    \tfor (const field in this.attributes) {\n      \t\tthis.attributes[field] = '';\n      \t\tconst control = form.get(field);\n      \t\tif (control && !control.valid) {\n        \t\tconst messages = this.validationMessages[field];\n        \t\tfor (const key in control.errors) {\n          \t\t\tif (this.attributes[field] == '') {\n              \t\t\tthis.attributes[field] += messages[key] + ' ';\n          \t\t\t}\n        \t\t}\n      \t\t}\n    \t}\n    \tif (this.resetPasswordForm.valid) {\n    \t\tthis.showErrors = 0;\n        \tthis.spinner.show();\n    \t\tthis.adminAuthService.resetPassword(this.resetPasswordForm.get('password').value,this.resetPasswordForm.get('confirmPassword').value,this.resetToken).then((result) => {\n    \t\t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n          \t\tif(result['message'] && result['message'] != ''){\n          \t\t\tthis.toastr.success(result['message']);\t\n          \t\t}else{\n          \t\t\tthis.toastr.success(Config.RESET_PASSWORD_SUCCESS_MSG);\n          \t\t}\n          \t\tthis.router.navigate(['/superadmin/login']);\n  \t\t\t},error => {\n        \t\tthis.spinner.hide();\n        \t\tthis.loading = false;\n        \t\tthis.resetPasswordForm.reset();\n\t\t\t\tthis.toastr.error(error);\n     \t\t}); \n    \t}else{\n        \tthis.loading = false;\n      \t}\n\t}\n}","<div class=\"container\">\n\t<div class=\"row justify-content-center\">\n\t\t<div class=\"col-xl-6 col-lg-8 col-md-5\">\n\t\t\t<div class=\"card o-hidden border-0 shadow-lg my-5\">\n          \t\t<div class=\"card-body p-0\">\n            \t\t<div class=\"row\">\n              \t\t\t<div class=\"col-lg-12\">\n              \t\t\t\t<div class=\"p-5\">\n                  \t\t\t\t<div class=\"text-center\">\n                  \t\t\t\t\t<img src=\"assets/img/logo.png\" alt=\"app-logo\" class=\"logo\">\n                    \t\t\t\t<h1 class=\"h4 text-gray-900 mb-4\">Reset Password?</h1>\n                    \t\t\t</div>\n\t                  \t\t\t<form class=\"\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"submit()\" novalidate>\n\t                    \t\t\t<div class=\"form-group\">\n\t                    \t\t\t\t<div class=\"input-group\"> \n\t                      \t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"inputPassword\" aria-describedby=\"passwordHelp\" placeholder=\"Enter Password...\" formControlName=\"password\" [ngClass]=\"{ 'is-invalid': showErrors && !resetPasswordForm.controls.password.valid }\">\n                      \t\t\t\t\t\t<!-- <div class=\"input-group-append\">\n          \t\t\t\t\t\t\t\t\t\t<div class=\"input-group-text\">\n          \t\t\t\t\t\t\t\t\t\t\t<a href=\"javascript:void(0);\">\n          \t\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye-slash\" aria-hidden=\"true\"></i>\n      \t\t\t\t\t\t\t\t\t\t\t\t</a>\n          \t\t\t\t\t\t\t\t\t\t</div>\n        \t\t\t\t\t\t\t\t\t</div> -->\n        \t\t\t\t\t\t\t\t\t<div *ngIf=\"showErrors && !resetPasswordForm.controls.password.valid\" class=\"invalid-feedback\"> \n\t               \t\t\t\t\t\t\t\t{{ attributes.password }}\n\t            \t\t\t\t\t\t\t</div> \n    \t\t\t\t\t\t\t\t\t</div>\n\t                      \t\t\t</div>\n\t                    \t\t\t<div class=\"form-group\">\n\t                    \t\t\t\t<div class=\"input-group\">\n\t                      \t\t\t\t\t<input type=\"password\" class=\"form-control\" id=\"inputConfirmPassword\" aria-describedby=\"confirmPasswordHelp\" placeholder=\"Enter Confrim Password...\" formControlName=\"confirmPassword\" [ngClass]=\"{ 'is-invalid': showErrors && (!resetPasswordForm.controls.confirmPassword.valid || resetPasswordForm.hasError('mismatch'))}\">\n\t                      \t\t\t\t\t<!-- <div class=\"input-group-append\">\n          \t\t\t\t\t\t\t\t\t\t<div class=\"input-group-text\">\n          \t\t\t\t\t\t\t\t\t\t\t<a href=\"javascript:void(0);\">\n          \t\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye-slash\" aria-hidden=\"true\"></i>\n      \t\t\t\t\t\t\t\t\t\t\t\t</a>\n          \t\t\t\t\t\t\t\t\t\t</div>\n        \t\t\t\t\t\t\t\t\t</div> -->\n\t                      \t\t\t\t\t<div *ngIf=\"showErrors && !resetPasswordForm.controls.confirmPassword.valid\" class=\"invalid-feedback\"> \n\t               \t\t\t\t\t\t\t\t{{ attributes.confirmPassword }}\n\t            \t\t\t\t\t\t\t</div>\n\t            \t\t\t\t\t\t\t<div *ngIf=\"showErrors && resetPasswordForm.controls.confirmPassword.valid\" [hidden]=\"!resetPasswordForm.hasError('mismatch')\" class=\"invalid-feedback\">\n                          \t\t\t\t\t\t<span *ngIf=\"resetPasswordForm.hasError('mismatch')\">{{validationMessages.confirmPassword.mismatch}}\n                          \t\t\t\t\t\t</span>\n                      \t\t\t\t\t\t</div>\n            \t\t\t\t\t\t\t</div>\n\t                    \t\t\t</div>\n\t                    \t\t\t<button type=\"submit\" class=\"btn btn-primary btn-block\">\n\t                    \t\t\t\t<span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n\t                    \t\t\t\tSubmit\n                    \t\t\t\t</button>\n\t                    \t\t</form>\n                  \t\t\t\t<hr>\n\t                  \t\t\t<div class=\"text-center\">\n\t                    \t\t\t<a class=\"small\" routerLink=\"./../login\">Have you found password? Login!</a>\n\t                  \t\t\t</div>\n\t                  \t\t</div>\n              \t\t\t</div>\n            \t\t</div>\n          \t\t</div>\n        \t</div>\n\t\t</div>\n\t</div>\n</div>","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService, ClientService } from '../../_services';\n//import { ClientService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DataTableDirective } from 'angular-datatables';\n//import { Client } from '../../models/client';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.less']\n})\nexport class ClientComponent implements OnInit {\n  //changePasswordForm: FormGroup;\n    loading: boolean = false;\n    showErrors: number = 0;\n    clients: any;\n    resData: any;\n    \n    @ViewChild(DataTableDirective, {static: false})\n    dtElement: DataTableDirective;\n    dtOptions: DataTables.Settings = {};\n    dtTrigger: Subject<any> = new Subject<any>();\n\n  constructor(private formBuilder: FormBuilder,\n    \tprivate adminAuthService: AdminAuthService,\n      private clientService: ClientService,\n    \tprivate toastr: ToastrService,\n    \tprivate spinner: NgxSpinnerService,\n    \tprivate router : Router,\n    \tprivate route : ActivatedRoute,\n    \tprivate commonService : CommonService) { \n    this.commonService.setPageTitle(this.route.snapshot.data['title']);\n    this.commonService.checkSuperAdminLogin();\n\t}\n  \n  \n  ngOnInit() {\n    this.dtOptions = {\n      pagingType: 'full_numbers',\n      pageLength: 10\n    };\n    \n    this.getUsers();\n  }\n  \n  ngOnDestroy(): void {\n    // Do not forget to unsubscribe the event\n    this.dtTrigger.unsubscribe();\n  }\n\n  getUsers() {\n    this.clientService.getClients().then((result) => {\n        this.resData = result;\n        this.clients = this.resData.data;\n        this.dtTrigger.next();\n        },error => {\n        this.spinner.hide();\n        this.loading = false;\n        //this.changePasswordForm.reset();\n        this.toastr.error(error);\n    });\n  }\n  \n  \n  onDelete(id: number,rowIndex:number) { \n    if (confirm('Are you sure want to delete this?')) {\n      this.clientService.deleteClient(+id).then((result) => {\n          this.clients.splice(rowIndex,1);\n          this.toastr.success(result['message']);\t\n          this.rerender();\n        },error => {\n          this.spinner.hide();\n          this.loading = false;\n          //this.changePasswordForm.reset();\n          this.toastr.error(error);\n      });\n    }\n  }\n  \n  onUpdateStatus(id: number) { \n    if (confirm('Are you sure want to update status?')) {\n      this.clientService.updateStatus(+id).then((result) => {\n          //this.clients.splice(rowIndex,1);\n          this.toastr.success(result['message']);\n          setTimeout(function() {\n              location.reload();\n          }, 3000);\n          //this.rerender();\n        },error => {\n          this.spinner.hide();\n          this.loading = false;\n          //this.changePasswordForm.reset();\n          this.toastr.error(error);\n      });\n    }\n  }\n  \n  rerender() : void {\n    this.dtElement.dtInstance.then((dtInstance: DataTables.Api) => {\n      dtInstance.destroy();\n      this.dtTrigger.next();\n    });\n  }\n\n}\n","<!-- Begin Page Content -->\n        <div class=\"container-fluid\">\n\n          <!-- Page Heading -->\n          <h1 class=\"h3 mb-2 text-gray-800\">Clinics</h1>\n          <!--<p class=\"mb-4\">DataTables is a third party plugin that is used to generate the demo table below. For more information about DataTables, please visit the <a target=\"_blank\" href=\"https://datatables.net\">official DataTables documentation</a>.</p>-->\n\n          <!-- DataTales Example -->\n          <div class=\"card shadow mb-4\">\n            <div class=\"card-header py-3\">\n              <p style=\"float: left;\">\n              <a routerLink=\"/superadmin/client-archived\" class=\"btn btn-warning btn-icon-split\">\n                <span class=\"icon text-white-50\">\n                  <i class=\"fas fa-user\"></i>\n                </span>\n                <span class=\"text\">Archived Clinic</span>\n              </a>\n              </p>\n              <p style=\"float: right;\">\n              <a routerLink=\"/superadmin/client-register\" class=\"btn btn-success btn-icon-split\">\n                <span class=\"icon text-white-50\">\n                  <i class=\"fas fa-plus\"></i>\n                </span>\n                <span class=\"text\">Add New Clinic</span>\n              </a>\n              </p>\n            </div>\n            <div class=\"card-body\">\n              <div class=\"table-responsive\">\n                <table class=\"table table-bordered\" width=\"100%\" cellspacing=\"0\" datatable [dtOptions]=\"dtOptions\" [dtTrigger]=\"dtTrigger\">\n                  <thead>\n                    <tr>\n                      <th>Clinic Name</th>\n                      <th>Name</th>\n                      <th>Email</th>\n                      <th>Keyword</th>\n                      <th>Phone</th>\n                      <th>End Date</th>\n                      <th>Action</th>\n                    </tr>\n                  </thead>\n                  <!--<tfoot>\n                    <tr>\n                      <th>Name</th>\n                      <th>Position</th>\n                      <th>Office</th>\n                      <th>Age</th>\n                      <th>Start date</th>\n                      <th>Salary</th>\n                    </tr>\n                  </tfoot>-->\n                  <tbody>\n                   \n                    <tr *ngFor=\"let client of clients;let rowIndex = index\">\n                      <th>{{client.clinic_name}}</th>\n                      <td>{{client.first_name}} {{client.last_name}}</td>\n                      <td>{{client.email}}</td>\n                      <td>{{client.keyword}}</td>\n                      <td>{{client.phone_number}}</td>\n                      <td>{{client.end_date | date:'yyyy-MM-dd'}}</td>\n                      <td>\n                         <a routerLink=\"/superadmin/client-update/{{client.id}}\" class=\"btn btn-info btn-circle btn-sm\">\n                          <i class=\"fas fa-edit\"></i>\n                        </a>&nbsp;\n                        <a routerLink=\"/superadmin/send-message/{{client.id}}\" class=\"btn btn-info btn-circle btn-sm\">\n                          <i class=\"fas fa-envelope\"></i>\n                        </a>&nbsp;\n                        <a *ngIf=\"client.status == 'inactive'\" (click)=\"onUpdateStatus(client.id)\" class=\"btn btn-warning btn-circle btn-sm\">\n                          <i class=\"fas fa-toggle-on\"></i>\n                        </a>\n                        <a *ngIf=\"client.status == 'active'\" (click)=\"onUpdateStatus(client.id)\" class=\"btn btn-success btn-circle btn-sm\">\n                          <i class=\"fas fa-toggle-on\"></i>\n                        </a>&nbsp;                       \n                        <a (click)=\"onDelete(client.id,rowIndex)\" class=\"btn btn-danger btn-circle btn-sm\">\n                          <i class=\"fas fa-trash\"></i>\n                        </a>\n                      </td>\n                    </tr>\n                   \n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n\n        </div>\n        <!-- /.container-fluid -->","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AdminAuthService, CommonService } from '../../_services';\nimport { Config } from './../../constant';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./auth.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n\tloginForm: FormGroup;\n  loading = false;\n  showErrors: number = 0;\n    \n  constructor(private formBuilder: FormBuilder,\n  \tprivate adminAuthService: AdminAuthService,\n  \tprivate toastr: ToastrService,\n  \tprivate spinner: NgxSpinnerService,\n  \tprivate router : Router,\n    private route : ActivatedRoute,\n    private commonService : CommonService) { \n    this.commonService.setPageTitle(this.route.snapshot.data['title']);\n    this.commonService.checkSuperAdminLogin();\n  }\n\n\tngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required,Validators.email ] ],\n      password: ['', Validators.required]\n    });\n  }\n\n  attributes = {'email': '','password' : ''};\n\tvalidationMessages = {\n  \t'email': {\n\t    'required': Config.EMAIL_REQUIRED_VALIDATION_MSG,\n\t    'email': Config.EMAIL_FORMAT_VALIDATION_MSG\n    },\n    'password': {\n\t    'required': Config.PASSWORD_REQUIRED_VALIDATION_MSG\n  \t}\n\t};\n  submit() {\n    this.loading = true;\n    this.showErrors = 1;\n  \tconst form = this.loginForm;\n  \tfor (const field in this.attributes) {\n    \tthis.attributes[field] = '';\n    \tconst control = form.get(field);\n    \tif (control && !control.valid) {\n      \tconst messages = this.validationMessages[field];\n      \tfor (const key in control.errors) {\n        \tif (this.attributes[field] == '') {\n          \tthis.attributes[field] += messages[key] + ' ';\n        \t}\n      \t}\n    \t}\n  \t}\n    if (this.loginForm.valid) {\n      this.showErrors = 0;\n      this.spinner.show();\n      this.adminAuthService.login(this.loginForm.get('email').value,this.loginForm.get('password').value).then((result) => {\n        this.spinner.hide();\n        this.loading = false;\n        this.router.navigate(['/superadmin/client']);\n\t\t\t},error => {\n        this.spinner.hide();\n        this.loading = false;\n        this.loginForm.reset();\n        this.toastr.error(error);\n      }); \n  \t}else{\n      this.loading = false;\n    }\n\t}\n}","<div class=\"container\">\n\t<div class=\"row justify-content-center\">\n\t\t<div class=\"col-xl-6 col-lg-8 col-md-5\">\n\t\t\t<div class=\"card o-hidden border-0 shadow-lg my-5\">\n          \t\t<div class=\"card-body p-0\">\n            \t\t<div class=\"row\">\n              \t\t\t<div class=\"col-lg-12\">\n              \t\t\t\t<div class=\"p-5\">\n                  \t\t\t\t<div class=\"text-center\">\n                  \t\t\t\t\t<img src=\"assets/img/logo.png\" alt=\"app-logo\" class=\"logo\">\n                    \t\t\t\t<h1 class=\"h4 text-gray-900 mb-4\">Welcome Back!</h1>\n                  \t\t\t\t</div>\n\t                  \t\t\t<form class=\"\" [formGroup]=\"loginForm\" (ngSubmit)=\"submit()\" novalidate>\n\t                    \t\t\t<div class=\"form-group\">\n\t                      \t\t\t\t<input type=\"email\" class=\"form-control\" id=\"inputEmail\" aria-describedby=\"emailHelp\" placeholder=\"Enter Email Address...\" formControlName=\"email\" [ngClass]=\"{ 'is-invalid': showErrors && !loginForm.controls.email.valid }\">\n\t                      \t\t\t\t<div *ngIf=\"showErrors && !loginForm.controls.email.valid\" class=\"invalid-feedback\"> \n\t               \t\t\t\t\t\t\t{{ attributes.email }}\n\t            \t\t\t\t\t\t</div>  \n\t                    \t\t\t</div>\n\t                    \t\t\t<div class=\"form-group\">\n\t                      \t\t\t\t<input type=\"password\" class=\"form-control\" id=\"inputPassword\" placeholder=\"Password\" formControlName=\"password\" [ngClass]=\"{ 'is-invalid': showErrors && !loginForm.controls.email.valid }\">\n\t                      \t\t\t\t<div *ngIf=\"showErrors && !loginForm.controls.password.valid\" class=\"invalid-feedback\"> \n\t               \t\t\t\t\t\t\t{{ attributes.password }}\n\t            \t\t\t\t\t\t</div>\n\t                    \t\t\t</div>\n\t                    \t\t\t<button type=\"submit\" class=\"btn btn-primary btn-block\">\n\t                    \t\t\t\t<span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n\t                    \t\t\t\tLogin\n                    \t\t\t\t</button>\n\t                    \t\t</form>\n                  \t\t\t\t<hr>\n\t                  \t\t\t<div class=\"text-center\">\n\t                    \t\t\t<a class=\"small\" routerLink=\"./../forgot-password\">Forgot Password?</a>\n\t                  \t\t\t</div>\n\t                  \t\t</div>\n              \t\t\t</div>\n            \t\t</div>\n          \t\t</div>\n        \t</div>\n\t\t</div>\n\t</div>\n</div>\n\n"]}